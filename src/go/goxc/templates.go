// Code generated by go-bindata.
// sources:
// templates/attribute.tmpl
// templates/complexType.tmpl
// templates/element.tmpl
// templates/simpleType.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesAttributeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x49\x4d\xcb\xcc\x4b\x55\xa8\xae\x4e\x2c\x29\x29\xca\x4c\x2a\x2d\x49\xad\xad\xe5\x2a\x48\x4c\xce\x4e\x4c\x07\x89\xea\x05\x40\x98\x7e\x89\xb9\x20\x09\xae\x92\xca\x02\xb0\x30\x84\xaf\x50\x5c\x52\x54\x9a\x5c\xa2\x50\xcd\xc5\x19\x96\x98\x53\x0a\x96\x09\x01\xaa\x00\xca\x24\x54\xe4\xe6\x58\x29\xc1\x55\xea\x80\x8c\x57\x4a\xe0\xaa\xe5\xaa\xae\x4e\xcd\x4b\x01\x1a\x05\x08\x00\x00\xff\xff\x71\xb6\xc3\x90\x79\x00\x00\x00")

func templatesAttributeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAttributeTmpl,
		"templates/attribute.tmpl",
	)
}

func templatesAttributeTmpl() (*asset, error) {
	bytes, err := templatesAttributeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/attribute.tmpl", size: 121, mode: os.FileMode(436), modTime: time.Unix(1475047006, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesComplextypeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x4d\x5d\x0e\xc2\x30\x08\x7e\xb6\xa7\x20\x3b\x40\x0f\xe0\xbb\xaf\xc6\x07\x0f\x30\xd2\xa1\x2e\x16\x6c\x36\x8c\x33\x64\x77\x97\xa6\xea\x78\xe1\xfb\x85\x81\x2e\xa3\x10\x98\xa5\x07\x97\x4c\xcb\xf9\x5d\x68\x5d\x43\xc1\x74\xc7\x6b\xd5\xe3\xa9\xc1\x23\x72\x35\x82\x7a\xa0\xca\x8d\xc3\xac\xd3\x33\x29\x58\x30\x7b\x8d\x7a\x83\x78\xc8\xc4\x24\x3a\x7b\x16\x7c\xcc\x26\x14\x3f\x14\x9d\xef\xb6\x9a\xa3\xf6\x09\xfa\x85\xf3\xbe\xfb\x3b\x5d\xff\xad\x91\x0c\x5e\xf9\xed\x0d\x7d\x02\x00\x00\xff\xff\xc2\x7d\x9c\xde\xb1\x00\x00\x00")

func templatesComplextypeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesComplextypeTmpl,
		"templates/complexType.tmpl",
	)
}

func templatesComplextypeTmpl() (*asset, error) {
	bytes, err := templatesComplextypeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/complexType.tmpl", size: 177, mode: os.FileMode(436), modTime: time.Unix(1475047006, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesElementTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x4d\x5d\x0e\xc2\x30\x08\x7e\xb6\xa7\x20\x3b\x40\x0f\xe0\xbb\xaf\xc6\x07\x0f\x30\xd2\xa1\x2e\x16\x6c\x36\x8c\x33\x64\x77\x97\xa6\xea\x78\xe1\xfb\x85\x81\x2e\xa3\x10\x98\xa5\x07\x97\x4c\xcb\xf9\x5d\x68\x5d\x43\xc1\x74\xc7\x6b\xd5\xe3\xa9\xc1\x23\x72\x35\x82\x7a\xa0\xca\x8d\xc3\xac\xd3\x33\x29\x58\x30\x7b\x8d\x7a\x83\x78\xc8\xc4\x24\x3a\x7b\x16\x7c\xcc\x26\x14\x3f\x14\x9d\xef\xb6\x9a\xa3\xf6\x09\xfa\x85\xf3\xbe\xfb\x3b\x5d\xff\xad\x91\x0c\x5e\xf9\xed\x0d\x7d\x02\x00\x00\xff\xff\xc2\x7d\x9c\xde\xb1\x00\x00\x00")

func templatesElementTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesElementTmpl,
		"templates/element.tmpl",
	)
}

func templatesElementTmpl() (*asset, error) {
	bytes, err := templatesElementTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/element.tmpl", size: 177, mode: os.FileMode(436), modTime: time.Unix(1475047006, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSimpletypeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xa8\xae\xd6\x0b\x80\x30\xfd\x12\x73\x53\x6b\x6b\xb9\xb8\x4a\x2a\x0b\xc0\xc2\x10\xbe\x42\x71\x49\x51\x69\x72\x89\x42\x35\x97\x02\x10\x84\x25\xe6\x94\x82\x25\x43\x80\x8a\x80\x92\x09\x15\xb9\x39\x56\x4a\x3a\xc9\x19\x89\x45\x29\x89\x25\x89\x4a\x09\x5c\xb5\x5c\x80\x00\x00\x00\xff\xff\xa9\xf4\x88\x40\x5a\x00\x00\x00")

func templatesSimpletypeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSimpletypeTmpl,
		"templates/simpleType.tmpl",
	)
}

func templatesSimpletypeTmpl() (*asset, error) {
	bytes, err := templatesSimpletypeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/simpleType.tmpl", size: 90, mode: os.FileMode(436), modTime: time.Unix(1475164147, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/attribute.tmpl": templatesAttributeTmpl,
	"templates/complexType.tmpl": templatesComplextypeTmpl,
	"templates/element.tmpl": templatesElementTmpl,
	"templates/simpleType.tmpl": templatesSimpletypeTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"attribute.tmpl": &bintree{templatesAttributeTmpl, map[string]*bintree{}},
		"complexType.tmpl": &bintree{templatesComplextypeTmpl, map[string]*bintree{}},
		"element.tmpl": &bintree{templatesElementTmpl, map[string]*bintree{}},
		"simpleType.tmpl": &bintree{templatesSimpletypeTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

