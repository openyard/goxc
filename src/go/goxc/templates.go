// Code generated by go-bindata.
// sources:
// templates/abstract.tmpl
// templates/any.tmpl
// templates/attribute.tmpl
// templates/attribute_group.tmpl
// templates/base_type.tmpl
// templates/complex_element.tmpl
// templates/complex_type.tmpl
// templates/enumeration.tmpl
// templates/list_type.tmpl
// templates/simple_type.tmpl
// templates/union_type.tmpl
// DO NOT EDIT!

package goxc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesAbstractTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x24\x8c\x41\x0a\xc2\x40\x0c\x45\xf7\x73\x8a\x7f\x01\xed\x31\xdc\x89\xb8\x70\x1f\xc7\x4f\x2d\x62\x5b\xd2\x38\x2a\x43\xee\xde\x0c\xb3\x09\xe1\xbd\xc7\x1f\x06\x9c\x38\x53\xc5\xf8\xc0\x77\xb2\x27\xc6\xe5\x97\x51\x6a\x3d\xde\xa8\xdb\xb4\xcc\xee\x38\x40\x59\x10\xe8\xca\xe2\x9e\x56\xc9\x2f\x19\xd9\xc0\xa5\xbf\x67\x79\x33\x44\x8a\x35\xb9\x6f\xa6\x92\x0d\xf6\x5f\x99\xda\x69\x5d\x0f\x10\xea\x13\xaa\x7a\xda\x03\x00\x00\xff\xff\xdb\x19\x22\xfe\x78\x00\x00\x00")

func templatesAbstractTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAbstractTmpl,
		"templates/abstract.tmpl",
	)
}

func templatesAbstractTmpl() (*asset, error) {
	bytes, err := templatesAbstractTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/abstract.tmpl", size: 120, mode: os.FileMode(436), modTime: time.Unix(1487675824, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesAnyTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x24\x8e\x31\x8f\xc2\x30\x0c\x85\x77\xff\x0a\x2b\x73\xaf\xdd\x6f\x3b\xdd\xc0\x02\x08\x31\x20\xc6\x46\xa9\x55\x22\x88\x13\xa5\xa6\xb4\xaa\xf2\xdf\x71\x20\x43\xf4\xfc\xbd\xa7\x67\x77\x1d\xee\x88\x29\x5b\xa1\x01\x5f\x5e\x6e\x38\xc6\xc5\xe1\xbc\x6d\xed\x85\xf2\xe4\x23\x97\x82\x3f\x98\x69\x46\x45\x67\x9a\x4b\x81\x64\xdd\xdd\x8e\x54\xc1\xe9\x2b\x8f\x36\x90\x1a\xe0\x43\x8a\x59\xd0\x10\xbb\x38\x78\x1e\xbb\x25\x3c\x0c\x80\x2e\xb1\xbc\xa2\xac\x89\xa0\x7e\xf8\xa7\xd3\x24\xf9\xe9\x04\x37\x40\x7d\xd7\xc3\xbe\x76\xa0\xe6\xdb\x2a\x3e\xf0\x3f\xb2\x10\x4b\x4d\x6a\x97\x82\x5e\xed\x5f\xd3\x78\xd6\x83\x55\x36\x31\x78\xa1\x90\x64\x35\x3d\x14\x78\x07\x00\x00\xff\xff\x22\xa2\xf3\xc8\xcb\x00\x00\x00")

func templatesAnyTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAnyTmpl,
		"templates/any.tmpl",
	)
}

func templatesAnyTmpl() (*asset, error) {
	bytes, err := templatesAnyTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/any.tmpl", size: 203, mode: os.FileMode(436), modTime: time.Unix(1487675824, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesAttributeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8e\x3f\x8f\x82\x40\x10\xc5\xeb\xdb\x4f\x31\xa1\xbe\x83\xfe\x3a\x2b\x63\x63\x8c\x31\xd4\x8c\x30\xc1\x8d\xb0\x90\x61\x40\xcc\x66\xbe\xbb\xb3\x92\xe8\x16\xfb\xe7\xfd\xde\x7b\x3b\x45\x01\x7b\x0a\xc4\x28\xd4\xc0\xc3\xcb\x0d\xda\x61\xad\x61\x89\x31\x2f\x89\x27\x3f\x04\x55\xf8\x03\xa6\x05\x4c\x3a\xd3\xa2\xea\x46\xac\xef\xd8\x52\x12\x4e\xdb\xf5\x88\x3d\x19\x88\x91\x31\x18\xc8\x0f\xfd\x38\xb0\x4c\x26\x81\x2d\xff\x7e\x25\xfb\xae\xf3\x68\x2a\x64\xdf\xa8\x6a\x66\x39\x0a\x8d\x99\x6d\x18\x14\x61\x7f\x9d\x85\x40\x9e\x23\xb9\xb4\xa5\xe0\xc5\xce\xed\x13\x98\x84\xe7\xda\xda\xdc\x4f\x89\xdd\xfc\xa1\x46\xaa\xb5\xef\xfe\x53\xf5\xe6\xfc\x4d\x5d\x59\xe5\xd4\xbd\x02\x00\x00\xff\xff\xc8\x18\x3d\x20\xe5\x00\x00\x00")

func templatesAttributeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAttributeTmpl,
		"templates/attribute.tmpl",
	)
}

func templatesAttributeTmpl() (*asset, error) {
	bytes, err := templatesAttributeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/attribute.tmpl", size: 229, mode: os.FileMode(436), modTime: time.Unix(1487675983, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesAttribute_groupTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8e\x4d\x4f\x86\x30\x10\x84\xef\xfd\x15\x1b\xce\xbe\x70\xf7\xc6\xc1\x18\x2f\x6a\x8c\xf1\x4c\x85\x0d\x36\xd2\x8f\x6c\x17\x84\x34\xfd\xef\x2e\x1f\x2f\xf4\xd4\x9d\xdd\x67\x66\xaa\x0a\x9e\xd1\x21\x69\xc6\x0e\xfe\x0c\xff\x40\xef\xe7\x16\xa6\x94\xca\x2f\xa4\x68\xbc\xcb\x19\x6e\x40\x38\x81\x48\x1f\x38\xe5\xac\x82\x6e\x7f\x75\x8f\xab\xf0\xbe\x7f\x5f\xb5\x45\x59\xa8\x94\x48\x3b\xd9\x94\x2f\x36\x78\xe2\x08\x37\x51\x41\x9e\xd9\xe6\x95\xa8\x07\xa3\xa3\x78\x16\x17\x9d\x73\x21\x24\xba\x4e\x8e\xa5\x8f\x66\x26\xf3\x3d\x32\x42\x4f\x7e\x0c\x8a\x97\xb0\x65\xed\x21\x10\x99\xc6\x56\xac\xae\xb0\xfa\x0e\xc4\x23\x4d\x8e\x3f\x05\x3a\x80\x63\x92\x5f\x33\xdb\xe1\xb1\x38\xad\x1e\xd6\x24\x99\xde\xac\xe1\x27\x1b\x78\x91\x22\xcd\xd9\x24\xab\xff\x00\x00\x00\xff\xff\xa4\xab\x4c\xe6\x1c\x01\x00\x00")

func templatesAttribute_groupTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAttribute_groupTmpl,
		"templates/attribute_group.tmpl",
	)
}

func templatesAttribute_groupTmpl() (*asset, error) {
	bytes, err := templatesAttribute_groupTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/attribute_group.tmpl", size: 284, mode: os.FileMode(436), modTime: time.Unix(1487675983, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesBase_typeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8e\xcd\xaa\xc2\x30\x10\x85\xf7\x7d\x8a\xa1\xfb\xdb\x3e\xc3\x5d\x89\x1b\x11\x11\xf7\x63\x7b\xa8\x41\x9b\x84\x24\x44\x25\xcc\xbb\x3b\x63\x17\x66\x11\x4e\xbe\xf3\x43\xc6\x91\x76\xf0\x48\x5c\x30\xd3\xd3\x95\x1b\x2d\xe1\x35\x51\x6d\x6d\xb8\x20\x65\x17\xbc\x08\xfd\x51\x42\x25\x45\x27\x54\x91\x2e\xf2\x74\xe7\x05\x06\x8e\x9b\x3c\xf0\x0a\x35\xba\xd6\x12\x7b\x75\x86\xfd\x1a\x43\x2a\x59\x19\xe9\x71\xdf\x97\xe5\xff\x1f\x8e\x95\x52\xff\xeb\x8a\xf4\xda\x83\x9f\x6d\x40\xbf\x73\xe5\x0c\x2a\xef\x88\xce\x2e\x2b\x6d\xeb\xa6\xce\x4a\x34\xf6\x09\x00\x00\xff\xff\xc7\xaa\x66\xd8\xb5\x00\x00\x00")

func templatesBase_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesBase_typeTmpl,
		"templates/base_type.tmpl",
	)
}

func templatesBase_typeTmpl() (*asset, error) {
	bytes, err := templatesBase_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/base_type.tmpl", size: 181, mode: os.FileMode(436), modTime: time.Unix(1487675983, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesComplex_elementTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\x3f\x4f\xc3\x30\x10\xc5\xf7\x7c\x8a\x53\xe6\x26\xdd\xd9\x8a\x84\x2a\x16\x40\x15\xea\xdc\xc3\x39\x5a\x0b\xff\x93\x7d\x09\xa9\x22\x7f\x77\x2e\x4e\x09\x03\xcd\x94\xbb\x77\xef\xfd\x9e\xbc\xdd\xc2\x9e\x1c\x45\x64\xea\xe0\x5b\xf3\x05\xce\x7e\x54\x30\x4c\x53\x7b\xa4\x98\xb4\x77\x39\x43\x03\x91\x06\x90\xd5\x81\x86\x9c\xab\x80\xea\x0b\xcf\x34\x2f\xde\x96\xdf\x17\xb4\x24\x42\x35\x4d\x11\x9d\x28\xed\xb3\x0d\x3e\x72\x82\x46\xb6\x20\x9f\x2e\xf3\xec\xd8\x19\x8d\x49\x32\xeb\x3f\x77\xce\xb5\x38\xc9\x75\x72\x2c\x7d\x94\xb7\xc1\xd0\x08\x64\xc8\x92\xe3\x8a\xaf\xa1\xb0\x16\x08\x24\x8e\xbd\x92\xa8\x92\x7b\x44\xd3\x17\xf1\x11\xd3\x2c\x9e\x46\x6b\x1e\xea\x8d\xba\x60\xec\x90\xb1\x3e\x95\xab\xb5\xd6\x8e\x39\xea\x8f\x9e\x29\xdd\x7a\x2d\x6a\x03\xed\xbb\x40\x6e\x00\x49\x9b\xa7\x35\x6d\x45\x6f\x50\xec\x32\xbd\x5a\xcd\x4f\x36\xf0\x55\x8a\xff\x02\x96\xf6\xf7\x61\xfb\xe8\xfb\xf0\x8f\x78\xa0\xcf\xd5\x21\xee\xf2\x54\xb9\xfa\x09\x00\x00\xff\xff\xcb\x69\xa3\xe8\x90\x01\x00\x00")

func templatesComplex_elementTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesComplex_elementTmpl,
		"templates/complex_element.tmpl",
	)
}

func templatesComplex_elementTmpl() (*asset, error) {
	bytes, err := templatesComplex_elementTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/complex_element.tmpl", size: 400, mode: os.FileMode(436), modTime: time.Unix(1487675983, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesComplex_typeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x90\xcf\x4a\xc3\x40\x10\x87\xef\x79\x8a\x21\x47\x31\xe9\xc1\x9b\xb7\x0a\xa5\x78\x51\x29\xe2\x45\x84\xae\xe9\x58\x17\xb3\x7f\xd8\x9d\xa4\x09\x61\xdf\xdd\xd9\x24\xae\x56\x05\xf1\xd2\x1c\xc2\xce\xcc\x7e\xf3\xfd\xd8\xc5\x02\xd6\xa8\xd1\x09\xc2\x1d\x1c\x24\xbd\xc2\xde\x74\x15\xb4\xc3\x50\x3e\xa0\xf3\xd2\xe8\x10\xa0\x00\x87\x2d\x70\x6b\x83\x6d\x08\x99\x15\xd5\x9b\xd8\x63\x6c\xdc\x4d\xc7\x1b\xa1\x90\x07\xd9\x30\x38\xa1\x79\x52\x5e\x2b\x6b\x1c\x79\x28\xb8\x0b\xfc\xc9\xb1\x8e\xc4\xb2\x96\xc2\xf3\xce\xfc\x93\x0e\x21\x67\x12\xf5\x6e\xbc\xce\x89\x2a\xa3\x6c\x8d\x1d\x50\x6f\x31\x8b\xbf\x08\x4e\x0e\xf0\xe4\x9a\x8a\x37\x8d\x6b\xb9\x7d\x25\x3c\xce\x92\x64\x5f\x12\x39\xf9\xdc\x10\xfa\x79\x32\x4d\x0b\x28\xef\x79\xd9\xbc\x88\xd9\x58\xf1\x69\xdb\xa9\xfa\x32\x4f\x8a\x73\xc1\x38\x57\xb7\x4a\xd2\x4a\x59\xea\x39\xdf\x76\x16\x7c\x84\x3c\xd2\xad\x6a\x54\xa8\xe9\x0f\xd9\x14\xf4\x58\xe6\xf9\x29\xb9\x99\xd4\xff\xb1\x6e\xf0\xe5\xc4\xc6\xf4\xac\x6b\x67\x1a\xfb\x43\xce\x81\x12\xf1\x3b\xaf\xfb\x2f\x0c\x57\xf0\xf8\x74\x76\xb8\xa8\xe2\xe0\x1b\x17\xb2\xf7\x00\x00\x00\xff\xff\x28\x09\x64\x95\x99\x02\x00\x00")

func templatesComplex_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesComplex_typeTmpl,
		"templates/complex_type.tmpl",
	)
}

func templatesComplex_typeTmpl() (*asset, error) {
	bytes, err := templatesComplex_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/complex_type.tmpl", size: 665, mode: os.FileMode(436), modTime: time.Unix(1487675983, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesEnumerationTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8e\xc1\xca\xc2\x30\x10\x84\xef\x7d\x8a\xa5\xa7\xff\x3f\xb4\x7d\x02\x0f\x0a\x22\x5e\x44\x44\x7a\x95\xa5\x5d\x6a\xb0\x4d\x4a\x92\x56\x25\xec\xbb\xbb\x69\x0b\xd9\xd3\x30\xbb\xf3\xed\x54\x15\x9c\x48\x93\x45\x4f\x2d\xbc\x95\x7f\x42\x67\x3e\x0d\xcc\x21\x94\x35\x59\xa7\x8c\x66\x86\x02\x2c\xcd\x20\xd6\x8d\x66\xe6\x6c\xc4\xe6\x85\x1d\x45\xe3\xba\xca\x0b\x0e\x24\x8b\x10\x2c\x6a\x59\x94\xe7\x61\x34\xd6\x3b\xb1\xd4\xa2\xe2\xe9\xbe\x57\x28\x0e\xe4\x29\xc6\x9c\x4b\x86\x74\x2b\x87\xfe\x3b\x6e\x44\x4b\xda\x33\x8b\x5c\xa9\xd1\x3c\xa0\x8b\xfc\xac\x31\xda\x79\xf8\x4b\x8f\x8e\x7a\x1a\x62\x79\xe9\x19\xbf\x81\x4c\x08\x05\x6c\xd1\x87\x44\xef\xc2\x4d\xa0\x4d\xed\x96\x16\x35\xf6\x53\xea\x00\x85\x00\xfe\x7f\x01\x00\x00\xff\xff\x56\x20\x91\x02\x10\x01\x00\x00")

func templatesEnumerationTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEnumerationTmpl,
		"templates/enumeration.tmpl",
	)
}

func templatesEnumerationTmpl() (*asset, error) {
	bytes, err := templatesEnumerationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/enumeration.tmpl", size: 272, mode: os.FileMode(436), modTime: time.Unix(1487675983, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesList_typeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8e\x31\x8b\xc3\x30\x0c\x85\xf7\xfc\x0a\xe1\xf1\xb8\x4b\xf6\xdb\x3a\x95\x2e\xa5\x94\x92\xa5\x14\x22\x1c\x91\x98\x3a\x4e\xb0\x9d\x34\xc5\xe8\xbf\x57\x4e\x86\x7a\x30\xd2\xfb\xde\x7b\xa8\xaa\xe0\x48\x8e\x3c\x46\x6a\xe1\x65\x62\x0f\xdd\xb8\x6a\x58\x52\x2a\x6b\xf2\xc1\x8c\x8e\x19\xfe\xc0\xd3\x02\x22\x5d\x69\x61\x2e\x26\xd4\x4f\xec\x28\x0b\x97\x7d\x3c\xe3\x40\x02\x52\xf2\xe8\x04\x94\xa7\x61\x1a\x7d\x0c\x22\x81\x3c\xb3\x6d\xd9\x7e\xb0\x06\x45\x05\xf5\x8d\x32\x2b\xc9\x91\x6b\xc5\x2c\xc7\x58\x13\x22\xc4\xf7\x44\x45\xfe\x72\x66\xef\x86\x10\xfd\xac\xa5\x64\x6b\xac\xd1\xce\x04\xf7\xc7\x8f\xf0\x9b\xf8\x84\x37\xeb\x60\xff\xd5\xaf\xee\xd1\xb7\x18\x51\x35\x05\x7f\x02\x00\x00\xff\xff\x9b\xe9\x8a\x78\xdc\x00\x00\x00")

func templatesList_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesList_typeTmpl,
		"templates/list_type.tmpl",
	)
}

func templatesList_typeTmpl() (*asset, error) {
	bytes, err := templatesList_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/list_type.tmpl", size: 220, mode: os.FileMode(436), modTime: time.Unix(1487675983, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSimple_typeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8e\xcd\xaa\xc2\x30\x10\x85\xf7\x7d\x8a\xa1\xfb\xdb\x3e\xc3\x5d\x89\x1b\x11\x11\xf7\x43\x3b\xd4\x60\x9b\x84\x24\x44\x25\xcc\xbb\x7b\xc6\x2e\xcc\x22\x9c\x7c\xe7\x87\x8c\x23\x1d\xc4\x4b\xe2\x22\x33\x3d\x5d\xb9\xd3\x12\x5e\x13\xd5\xd6\x86\x9b\xa4\xec\x82\x57\xa5\x3f\x4a\x52\x09\xe8\x22\x55\xb5\x8b\x3c\x3d\x78\x11\x03\xe7\x5d\x9e\x78\x13\x18\x5d\x6b\x89\x3d\x9c\xe1\xb8\xc5\x90\x4a\x06\x23\x1c\xf7\x7d\x59\xfe\x7f\x75\x0c\x4a\xfd\xaf\xab\xda\xa3\x27\x7e\xb6\x01\x7c\x27\x23\xbd\x0a\x95\x77\x94\xce\x2e\xab\xed\xfb\xa6\xae\x20\x08\x7e\x02\x00\x00\xff\xff\xb1\x53\x25\x5d\xb7\x00\x00\x00")

func templatesSimple_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSimple_typeTmpl,
		"templates/simple_type.tmpl",
	)
}

func templatesSimple_typeTmpl() (*asset, error) {
	bytes, err := templatesSimple_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/simple_type.tmpl", size: 183, mode: os.FileMode(436), modTime: time.Unix(1487675983, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesUnion_typeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x24\x8c\x41\x0a\xc2\x40\x0c\x45\xf7\x39\xc5\xbf\x80\xf6\x18\xee\x44\x44\xdc\x0f\xe3\xa7\x16\x71\x5a\xd2\x74\x54\x86\xdc\xdd\x0c\xcd\x22\x84\xf7\xf2\xff\x30\xe0\xc4\x42\x4d\xc6\x07\x3e\x93\x3d\x31\xce\xdf\x8c\xda\xda\xf1\x4e\x5d\xa7\xb9\xb8\xe3\x00\x65\x45\xa0\x2b\xab\xbb\x2c\x29\xbf\xd2\xc8\x0e\x2e\xfb\x79\x4e\x6f\x86\x90\x68\xdb\x4a\x64\x60\xbf\x85\xd2\x57\x7f\xda\x2d\x56\xd3\x2d\x1b\x9a\x20\x26\xf0\x2d\x74\x84\x5c\xfe\x01\x00\x00\xff\xff\x66\x1d\x36\x78\x84\x00\x00\x00")

func templatesUnion_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesUnion_typeTmpl,
		"templates/union_type.tmpl",
	)
}

func templatesUnion_typeTmpl() (*asset, error) {
	bytes, err := templatesUnion_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/union_type.tmpl", size: 132, mode: os.FileMode(436), modTime: time.Unix(1487675983, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/abstract.tmpl": templatesAbstractTmpl,
	"templates/any.tmpl": templatesAnyTmpl,
	"templates/attribute.tmpl": templatesAttributeTmpl,
	"templates/attribute_group.tmpl": templatesAttribute_groupTmpl,
	"templates/base_type.tmpl": templatesBase_typeTmpl,
	"templates/complex_element.tmpl": templatesComplex_elementTmpl,
	"templates/complex_type.tmpl": templatesComplex_typeTmpl,
	"templates/enumeration.tmpl": templatesEnumerationTmpl,
	"templates/list_type.tmpl": templatesList_typeTmpl,
	"templates/simple_type.tmpl": templatesSimple_typeTmpl,
	"templates/union_type.tmpl": templatesUnion_typeTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"abstract.tmpl": &bintree{templatesAbstractTmpl, map[string]*bintree{}},
		"any.tmpl": &bintree{templatesAnyTmpl, map[string]*bintree{}},
		"attribute.tmpl": &bintree{templatesAttributeTmpl, map[string]*bintree{}},
		"attribute_group.tmpl": &bintree{templatesAttribute_groupTmpl, map[string]*bintree{}},
		"base_type.tmpl": &bintree{templatesBase_typeTmpl, map[string]*bintree{}},
		"complex_element.tmpl": &bintree{templatesComplex_elementTmpl, map[string]*bintree{}},
		"complex_type.tmpl": &bintree{templatesComplex_typeTmpl, map[string]*bintree{}},
		"enumeration.tmpl": &bintree{templatesEnumerationTmpl, map[string]*bintree{}},
		"list_type.tmpl": &bintree{templatesList_typeTmpl, map[string]*bintree{}},
		"simple_type.tmpl": &bintree{templatesSimple_typeTmpl, map[string]*bintree{}},
		"union_type.tmpl": &bintree{templatesUnion_typeTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

