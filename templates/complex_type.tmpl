// Generated with goxc v{{.Version}} - rev {{.Rev}}
package {{.PackageName}}

{{range .Imports -}}
    import {{.Alias}} "{{.Package}}"
{{end -}}
// ComplexType
type {{.Name}} struct {
    {{.Base}}
    {{range .Attributes}}
        {{- .TypeName}} *{{.Type}} `xml:"{{.Name}},attr{{.OmitEmpty}}"`
    {{end -}}
    {{range .Elements}}
        {{- .TypeName}} {{.Array}}*{{.Base}} `xml:"{{.Namespace}}{{.Name}}{{.OmitEmpty}}"`
    {{end -}}
    {{range .Refs}}
        {{- .TypeName}} *{{.Base}} `xml:"{{.Namespace}}{{.Name}}{{.OmitEmpty}}"`
    {{end -}}
    {{range .AttributeGroups}}
        {{- .Ref}}
    {{end -}}
    {{range .Any}}
        Any []*w3c.Any
    {{end -}}
}

{{if .Base}}
func New{{.Name}}() *{{.Base}} {
    return new({{.Base}})
}
{{else}}
func New{{.Name}}() *{{.Name}} {
    return new({{.Name}})
}
{{end}}

{{range .Attributes}}
func (me *{{.Parent}}) Set{{.TypeName}}(value *{{.Type}}) {
    me.{{.TypeName}} = value
}
{{end -}}

{{range .Elements}}
{{if .Array}}
func (me *{{.Parent}}) Add{{.TypeName}}(value *{{.Base}}) {
    me.{{.TypeName}} = append(me.{{.TypeName}}, value)
}
{{else}}
func (me *{{.Parent}}) Set{{.TypeName}}(value *{{.Base}}) {
    me.{{.TypeName}} = value
}
{{end}}
{{end -}}

{{range .Refs}}
func (me *{{.Parent}}) Set{{.TypeName}}(value *{{.Base}}) {
    me.{{.TypeName}} = value
}
{{end -}}