// Code generated by go-bindata.
// sources:
// templates/abstract.tmpl
// templates/any.tmpl
// templates/attribute.tmpl
// templates/attribute_group.tmpl
// templates/base_type.tmpl
// templates/complex_element.tmpl
// templates/complex_type.tmpl
// templates/enumeration.tmpl
// templates/list_type.tmpl
// templates/simple_type.tmpl
// templates/union_type.tmpl
// DO NOT EDIT!

package goxc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesAbstractTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x24\xca\x41\x0a\xc2\x40\x0c\x85\xe1\x7d\x4e\xf1\x2e\x60\xe7\x18\xee\x44\x5c\xb8\x8f\xe3\xa3\x16\xb1\x2d\x69\x1c\x95\x90\xbb\xcb\xd0\xcd\xe3\xf1\xf3\x95\x82\x23\x67\x9a\x3a\xef\xf8\x4c\xfe\xc0\xb8\x7c\x2b\x5a\xc4\x70\xa5\x6d\xd3\x32\x67\xe2\x00\x63\x43\xc4\x70\x61\xcb\x94\x55\xeb\x53\x47\xf6\x70\xde\xef\x49\x5f\xcc\x14\x29\x05\x7a\xdb\xdc\xb4\x3a\xfc\xb7\x52\xfa\x74\xb7\x03\x6c\x6e\xef\xea\x88\x94\x7f\x00\x00\x00\xff\xff\xdb\x19\x22\xfe\x78\x00\x00\x00")

func templatesAbstractTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAbstractTmpl,
		"templates/abstract.tmpl",
	)
}

func templatesAbstractTmpl() (*asset, error) {
	bytes, err := templatesAbstractTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/abstract.tmpl", size: 120, mode: os.FileMode(436), modTime: time.Unix(1519746805, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesAnyTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x24\x8c\x31\x4b\x04\x31\x10\x85\xfb\xf9\x15\x8f\xad\xcf\x4d\x6f\x27\x16\x36\x2a\x62\x21\x96\x17\xf6\x86\x35\x98\x99\x84\xdc\xb8\x26\x84\xfc\x77\x89\xd7\x3c\x3e\x3e\x1e\x9f\x73\x78\x62\xe5\xe2\x8d\x2f\xf8\x0d\xf6\x85\x3d\xd5\x0d\x47\xef\xeb\x07\x97\x6b\x48\x3a\x06\xee\x50\xf8\x40\xef\xeb\x3b\x1f\x63\x50\xf6\xdb\xb7\xdf\x79\x8a\xb7\x1b\xbe\x7a\xe1\x31\x88\x82\xe4\x54\x0c\x0b\xeb\x96\x2e\x41\x77\x57\x25\x2e\x44\xce\xc1\x6b\x83\xb5\xcc\x34\x07\x0f\xda\x70\xb5\xf2\xb3\x19\x3a\x01\xc0\xe7\xcb\xf3\x6c\xa0\x4a\x5c\x27\xfc\xcb\xc7\xa4\xc6\x6a\xf3\x19\x74\x07\x70\xae\x12\xef\x97\x53\x50\xe5\x52\x25\x9e\x92\x04\x63\xc9\xd6\x96\x33\x0d\xfa\x0b\x00\x00\xff\xff\x22\xa2\xf3\xc8\xcb\x00\x00\x00")

func templatesAnyTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAnyTmpl,
		"templates/any.tmpl",
	)
}

func templatesAnyTmpl() (*asset, error) {
	bytes, err := templatesAnyTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/any.tmpl", size: 203, mode: os.FileMode(436), modTime: time.Unix(1519746805, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesAttributeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8d\xbb\x4e\xc4\x40\x0c\x45\x6b\xfc\x15\x57\xa9\x21\xe9\xe9\xa8\x10\x0d\x42\x08\x6d\xbd\x26\x6b\x85\x11\x79\x69\xc6\x09\xbb\xb2\xee\xbf\xa3\x61\x11\x34\x96\x1f\xf7\x1c\x77\x1d\x1e\x6d\xb6\xac\x6e\x27\x7c\x25\xff\xc0\xb0\x9c\x7b\xec\x11\xed\xc1\x72\x49\xcb\x4c\xe2\x0e\xd9\x76\x44\xb4\xaf\xb6\x93\xb2\x6a\xff\xa9\x83\xd5\xc5\xcb\xb5\x7d\xd6\xc9\x48\x89\xc8\x3a\x0f\x86\xf6\x69\x5a\x97\xec\x85\x14\x00\x48\x3f\x53\x8d\x3f\x8c\x49\x0b\x89\xe6\x1f\x25\x1b\x89\xb0\xf9\x44\x4a\xd7\x41\xdd\x73\x7a\xdf\xdc\xe0\x97\xd5\xa4\x96\x0a\xbe\x5d\xd6\xdf\x27\x28\x9e\xb7\xde\x11\x72\x73\xd0\x71\xfb\xbb\x92\x38\x9e\xa7\xf1\xbe\xaa\xaf\xc9\xdb\xea\x6a\x8e\x42\xf9\x0e\x00\x00\xff\xff\xc8\x18\x3d\x20\xe5\x00\x00\x00")

func templatesAttributeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAttributeTmpl,
		"templates/attribute.tmpl",
	)
}

func templatesAttributeTmpl() (*asset, error) {
	bytes, err := templatesAttributeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/attribute.tmpl", size: 229, mode: os.FileMode(436), modTime: time.Unix(1519746805, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesAttribute_groupTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8e\xbd\x4e\xc4\x30\x10\x84\x7b\x3f\xc5\x28\x35\xe7\xf4\x74\x57\x20\x44\x03\x08\x21\xea\x33\xb9\x55\xb0\x38\x27\x96\xbd\x09\x17\xad\xe6\xdd\x51\xee\xb7\xdb\x59\xe9\x9b\x6f\xda\x16\xcf\x32\x48\x09\x2a\x7b\xfc\x45\xfd\x41\x3f\x1e\x3b\xcc\x66\xfe\x4b\x4a\x8d\xe3\x40\x62\x83\x22\x33\xcc\xfc\x87\xcc\xa4\xcb\xa1\xfb\x0d\xbd\xac\x8f\xf7\xf3\xf9\x1a\x92\x90\xce\x99\x95\x30\xf4\x02\xff\x92\xf2\x58\xb4\x62\x43\x3a\x00\x88\xa7\xbc\x12\xdb\x43\x0c\x95\x44\x73\xa7\xc9\xc6\x99\xc9\xb0\x27\x5d\xdb\x22\xa8\x96\xf8\x3d\xa9\xa0\x2f\xe3\x94\x9d\x2e\xf9\xe4\x3a\x4b\x50\xb5\x4c\x9d\xc2\xee\xb2\xed\x15\xa8\x17\x9b\x99\xff\x5c\xf2\x65\xd5\x35\x91\xd8\x1d\xd3\xe1\xb1\xb9\x55\x3d\xac\x26\x33\xff\x96\xa2\x3e\xa5\xac\x0b\xd9\xec\x6e\x4b\xe8\xfe\x03\x00\x00\xff\xff\xa4\xab\x4c\xe6\x1c\x01\x00\x00")

func templatesAttribute_groupTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAttribute_groupTmpl,
		"templates/attribute_group.tmpl",
	)
}

func templatesAttribute_groupTmpl() (*asset, error) {
	bytes, err := templatesAttribute_groupTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/attribute_group.tmpl", size: 284, mode: os.FileMode(436), modTime: time.Unix(1519746805, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesBase_typeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8d\xc1\x0a\xc2\x30\x0c\x86\xef\x7d\x8a\x9f\xdd\x5d\x9f\xc1\x93\x78\x11\x11\xf1\x1e\xb7\x30\x8b\xae\x2b\x6d\xa9\x8e\x90\x77\x97\xb8\x83\x97\xf0\x27\xe4\xfb\x7e\xef\x71\xe0\xc8\x99\x2a\x8f\x78\x87\xfa\xc0\xb4\x7c\x06\x34\x91\xfe\xc6\xb9\x84\x25\xaa\x62\x87\xcc\x0d\x22\xfd\x85\x9b\xaa\x4b\x34\x3c\x69\x62\x3b\x9c\xb7\x78\xa2\x99\x55\x9d\x13\xc9\x14\x27\x46\x7f\x9c\xd3\x92\x6b\x51\x75\x00\x10\x7e\x9b\xfd\xef\x5f\x81\x8a\x2a\xba\x3f\xab\xda\x39\x11\x8e\xa3\x09\xbc\xc7\x9d\x0a\xa3\xae\x89\x9d\x0d\x83\x36\xbb\xa5\xeb\x9a\xac\xe7\x1b\x00\x00\xff\xff\xc7\xaa\x66\xd8\xb5\x00\x00\x00")

func templatesBase_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesBase_typeTmpl,
		"templates/base_type.tmpl",
	)
}

func templatesBase_typeTmpl() (*asset, error) {
	bytes, err := templatesBase_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/base_type.tmpl", size: 181, mode: os.FileMode(436), modTime: time.Unix(1519746805, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesComplex_elementTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\x41\x4f\x84\x30\x10\x85\xef\xfd\x15\x13\xce\x0b\xdc\xbd\xad\x89\xd9\x78\x51\xb3\x31\x7b\xde\x11\x46\xb6\x91\x96\xa6\x1d\x10\x32\x99\xff\x6e\x28\x1b\x3c\xe8\xad\xd3\xd7\xf7\xbe\xd7\xa9\x6b\x38\x91\xa7\x88\x4c\x2d\x7c\x5b\xbe\x41\x37\xcc\x0d\x4c\x22\xd5\x85\x62\xb2\x83\x57\x85\x12\x22\x4d\x20\x52\x9d\x69\x52\x35\x01\x9b\x2f\xec\x68\xbd\x78\xdb\x8e\x2f\xe8\x48\xd5\x18\x91\x88\xbe\x23\xa8\x9e\x5d\x18\x22\x27\x28\x55\x0d\x00\x80\xcd\xf3\xea\x38\xf6\x16\x93\x2a\x14\xbf\x6e\xd5\xc2\x88\x90\x6f\x55\x4d\x5d\x43\x33\xb8\xd0\xd3\x0c\xd4\x93\x23\xcf\x86\x97\x90\x59\x1b\x04\x12\xc7\xb1\x61\x90\x9c\x7b\xc1\x7e\xcc\xe2\x23\xa6\x55\xbc\xce\xae\x7f\x28\x0e\xcd\x0d\x63\x8b\x8c\xc5\x35\xbf\xda\x6b\x1d\x99\xa3\xfd\x18\x99\xd2\xbd\xd7\xa6\x96\x50\xbd\x2f\xe1\xfe\x8b\x35\x6d\x9d\xf6\xb4\x1d\x7d\x40\xe6\x28\x52\xbd\x3a\xcb\x4f\x2e\xf0\xa2\xba\x03\xb6\xf6\xff\xc3\x4e\x71\x18\xc3\x1f\xe2\x99\x3e\x77\x07\xf9\x36\xaf\x4a\xcd\x4f\x00\x00\x00\xff\xff\xcb\x69\xa3\xe8\x90\x01\x00\x00")

func templatesComplex_elementTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesComplex_elementTmpl,
		"templates/complex_element.tmpl",
	)
}

func templatesComplex_elementTmpl() (*asset, error) {
	bytes, err := templatesComplex_elementTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/complex_element.tmpl", size: 400, mode: os.FileMode(436), modTime: time.Unix(1519746805, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesComplex_typeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x90\x4f\x4b\x33\x31\x10\xc6\xef\xf9\x14\xc3\x1e\x5f\xde\xee\x1e\xbc\x79\x5b\xa1\x14\x2f\x2a\x45\xbc\x88\xd0\xb8\x9d\xd6\xe0\x26\x1b\x92\xe9\x9f\x30\xcc\x77\x97\xec\xae\xab\x55\xa1\x08\x5e\x42\x26\x4f\x7e\xf9\x3d\xa4\xaa\x60\x81\x0e\x83\x26\x5c\xc3\xc1\xd0\x0b\x6c\xbb\x63\x03\x7b\xe6\xf2\x01\x43\x34\x9d\x13\x81\x19\x04\xdc\x03\x73\xb9\xc4\xbd\x88\xf2\xba\x79\xd5\x5b\xcc\x07\x77\xc3\xf6\x46\x5b\x14\x51\x8a\x39\x68\xb7\x45\x28\xaf\xad\xef\x02\x45\x98\x89\x28\x00\x00\xd3\xcf\x99\xa8\x5b\xa3\xa3\x08\x14\x1f\xb4\x48\xa1\x98\xd1\xad\xfb\xeb\x55\x05\x4d\x67\x7d\x8b\x47\xa0\xe4\x51\xe5\x25\x83\x83\x03\x22\x85\x5d\x43\xc0\xfd\xb3\xcc\xe5\x95\x8e\x38\x4a\x26\x7b\x4d\x14\xcc\xf3\x8e\x30\x8e\xc9\x90\xce\xa0\xbc\x4f\x7e\x2c\x9b\xd9\x3c\x89\xc0\xea\x68\xdb\xcb\x62\x52\xfc\xd7\x44\x81\xb9\xbc\xb5\x86\xe6\xd6\x53\x12\x29\x56\xa3\xe0\xbd\xe4\x89\x6e\xde\xa2\x45\x47\x67\x64\x75\x08\x3a\x89\x4c\x95\x4f\xb5\xd1\xeb\x06\xfb\x74\x20\x7e\xe3\x5f\xe2\xe6\x8c\xfb\xaf\x8d\xd3\x07\x2f\x42\xb7\xf3\xdf\xe4\x4b\xdc\x4c\xc4\xcf\xbc\x4b\x9f\x98\xda\x25\x78\x7c\xfa\x77\xb8\x68\x72\xf0\x85\x13\xf5\x16\x00\x00\xff\xff\xb4\xf0\x45\x80\xa3\x02\x00\x00")

func templatesComplex_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesComplex_typeTmpl,
		"templates/complex_type.tmpl",
	)
}

func templatesComplex_typeTmpl() (*asset, error) {
	bytes, err := templatesComplex_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/complex_type.tmpl", size: 675, mode: os.FileMode(436), modTime: time.Unix(1520935137, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesEnumerationTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8e\xc1\x4a\x04\x31\x10\x44\xef\xf9\x8a\x62\x4f\x7a\x98\xec\x17\x78\x50\x10\xf1\x22\x22\xb2\x57\x09\xb3\xcd\x18\xdc\xe9\x0c\x49\x76\x74\x69\xea\xdf\x25\xbb\x03\xb9\x15\x4d\xd7\xab\xb7\xdf\xe3\x45\x54\x72\xa8\x72\xc4\x6f\xac\xdf\x98\xd2\xdf\x88\xd5\xcc\x1f\x24\x97\x98\x94\xc4\x80\x2c\x2b\xcc\xfc\x87\xac\xa4\x5b\xc2\xf8\x13\x26\x69\x87\xf7\x5b\x7c\x0b\xb3\x90\xce\x2c\x07\x9d\x04\xfe\x75\x5e\x52\xae\x85\x74\xf1\x9a\xda\xeb\xe3\x29\x86\x42\x62\xd7\x6b\xe4\xce\x99\x89\x1e\x49\x57\x2f\xcb\x46\xcc\xa2\x95\x34\xf3\x37\x6a\x3b\x3e\x85\xd2\xf8\x6e\x4c\x5a\x2a\xee\xfa\xd0\xb3\x9e\xe7\x26\x1f\x93\xb6\x35\x00\x30\x1b\xb0\x55\xbf\xcc\xfc\xe7\x65\x91\x0e\xda\xd2\xc3\xd5\xe2\x10\x4e\xe7\xee\x80\x81\x74\xf7\xff\x01\x00\x00\xff\xff\x56\x20\x91\x02\x10\x01\x00\x00")

func templatesEnumerationTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEnumerationTmpl,
		"templates/enumeration.tmpl",
	)
}

func templatesEnumerationTmpl() (*asset, error) {
	bytes, err := templatesEnumerationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/enumeration.tmpl", size: 272, mode: os.FileMode(436), modTime: time.Unix(1519746805, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesList_typeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8c\x31\x6b\x03\x31\x0c\x85\x77\xff\x8a\xc7\x8d\xa5\x3d\xef\xdd\x3a\x95\x2e\xa5\x94\x92\xa5\x14\x22\x7c\xe2\x62\xea\xf3\x19\x5b\xb9\x26\x08\xfd\xf7\xe2\xdc\x90\x45\x48\x7a\xef\xfb\xbc\xc7\x2b\x67\xae\x24\x3c\xe1\x2f\xca\x09\xf3\x7a\x09\xd8\x54\xc7\x03\xd7\x16\xd7\x6c\x86\x27\x54\xde\xa0\x3a\x7e\xf2\x66\xe6\x0a\x85\x5f\x9a\xb9\x3f\x3e\xf6\xf5\x9d\x16\x36\x73\xaa\x95\xf2\xcc\x18\xdf\x96\xb2\x56\x69\x66\x0e\x00\xe2\xed\xea\xf5\x97\x14\xa9\x99\x61\xb8\xa3\x66\x83\x53\xe5\x3c\x99\x39\xef\x91\x62\x13\xc8\xb5\xb0\xeb\xa3\x33\xbb\x1b\x4d\xea\x39\x08\xf4\x66\x3c\x50\x3a\x33\xbe\x7f\x1e\x54\xc7\xaf\x6b\xe9\xf9\xf1\xb2\xa4\xe7\xe1\x31\x9c\xa8\x4e\x24\x34\x1c\x9d\xfd\x07\x00\x00\xff\xff\x9b\xe9\x8a\x78\xdc\x00\x00\x00")

func templatesList_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesList_typeTmpl,
		"templates/list_type.tmpl",
	)
}

func templatesList_typeTmpl() (*asset, error) {
	bytes, err := templatesList_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/list_type.tmpl", size: 220, mode: os.FileMode(436), modTime: time.Unix(1519746805, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSimple_typeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8d\xc1\x0a\xc2\x30\x0c\x86\xef\x7d\x8a\x9f\xdd\x5d\x9f\xc1\x93\x78\x11\x11\xf1\x1e\xb6\x30\x8b\x5b\x57\xda\x52\x1d\x21\xef\x2e\x71\x07\x2f\xe1\x4f\xc8\xf7\xfd\xde\xe3\xc4\x91\x33\x55\x1e\xf1\x0e\xf5\x89\x69\xfd\x0c\x68\x22\xfd\x83\x73\x09\x6b\x54\xc5\x01\x99\x1b\x44\xfa\x1b\x37\x55\x97\x68\x78\xd1\xc4\x76\xb8\xee\xf1\x42\x0b\xab\x3a\x27\x92\x29\x4e\x8c\xfe\xbc\xa4\x35\xd7\xa2\xea\x00\x20\xfc\x36\xfb\x3f\xce\x81\x8a\x2a\xba\x3f\xab\xda\x39\x11\x8e\xa3\x09\xbc\x47\x09\x4b\x9a\x19\x75\x4b\xec\x6c\x18\xb6\xfb\x2d\xdd\xb7\x64\x4d\xdf\x00\x00\x00\xff\xff\xb1\x53\x25\x5d\xb7\x00\x00\x00")

func templatesSimple_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSimple_typeTmpl,
		"templates/simple_type.tmpl",
	)
}

func templatesSimple_typeTmpl() (*asset, error) {
	bytes, err := templatesSimple_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/simple_type.tmpl", size: 183, mode: os.FileMode(436), modTime: time.Unix(1519746805, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesUnion_typeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x24\x8b\x51\x0a\x02\x31\x0c\x44\xff\x73\x8a\xb9\x80\xdb\x63\xf8\x27\x22\xe2\x7f\xa9\x61\x2d\x62\x5b\xba\xd9\xea\x12\x72\x77\x09\xfd\x19\x86\x37\xf3\x42\xc0\x99\x0b\xf7\x28\xfc\xc4\x37\xcb\x0b\x6b\xfd\x25\x0c\xd5\xe5\xc1\x7d\xcb\xb5\x98\xe1\x84\xce\x03\xaa\xcb\x8d\x87\x19\xb5\x98\xde\x71\x65\x07\xd7\x59\x2f\xf1\xc3\x66\x44\x21\x60\x2f\xb9\x16\xc8\xd1\x98\x3c\xfc\x34\x57\x6c\xd2\xf7\x24\x50\x02\xe0\xf8\x7e\x34\x97\x8c\xfe\x01\x00\x00\xff\xff\x66\x1d\x36\x78\x84\x00\x00\x00")

func templatesUnion_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesUnion_typeTmpl,
		"templates/union_type.tmpl",
	)
}

func templatesUnion_typeTmpl() (*asset, error) {
	bytes, err := templatesUnion_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/union_type.tmpl", size: 132, mode: os.FileMode(436), modTime: time.Unix(1519746805, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/abstract.tmpl": templatesAbstractTmpl,
	"templates/any.tmpl": templatesAnyTmpl,
	"templates/attribute.tmpl": templatesAttributeTmpl,
	"templates/attribute_group.tmpl": templatesAttribute_groupTmpl,
	"templates/base_type.tmpl": templatesBase_typeTmpl,
	"templates/complex_element.tmpl": templatesComplex_elementTmpl,
	"templates/complex_type.tmpl": templatesComplex_typeTmpl,
	"templates/enumeration.tmpl": templatesEnumerationTmpl,
	"templates/list_type.tmpl": templatesList_typeTmpl,
	"templates/simple_type.tmpl": templatesSimple_typeTmpl,
	"templates/union_type.tmpl": templatesUnion_typeTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"abstract.tmpl": &bintree{templatesAbstractTmpl, map[string]*bintree{}},
		"any.tmpl": &bintree{templatesAnyTmpl, map[string]*bintree{}},
		"attribute.tmpl": &bintree{templatesAttributeTmpl, map[string]*bintree{}},
		"attribute_group.tmpl": &bintree{templatesAttribute_groupTmpl, map[string]*bintree{}},
		"base_type.tmpl": &bintree{templatesBase_typeTmpl, map[string]*bintree{}},
		"complex_element.tmpl": &bintree{templatesComplex_elementTmpl, map[string]*bintree{}},
		"complex_type.tmpl": &bintree{templatesComplex_typeTmpl, map[string]*bintree{}},
		"enumeration.tmpl": &bintree{templatesEnumerationTmpl, map[string]*bintree{}},
		"list_type.tmpl": &bintree{templatesList_typeTmpl, map[string]*bintree{}},
		"simple_type.tmpl": &bintree{templatesSimple_typeTmpl, map[string]*bintree{}},
		"union_type.tmpl": &bintree{templatesUnion_typeTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

