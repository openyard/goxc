// Code generated by go-bindata.
// sources:
// templates/abstract.tmpl
// templates/any.tmpl
// templates/attribute.tmpl
// templates/attribute_group.tmpl
// templates/base_type.tmpl
// templates/complex_element.tmpl
// templates/complex_type.tmpl
// templates/enumeration.tmpl
// templates/list_type.tmpl
// templates/simple_type.tmpl
// templates/union_type.tmpl
// DO NOT EDIT!

package goxc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesAbstractTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xa8\xae\xd6\x0b\x80\x30\xfd\x12\x73\x53\x6b\x6b\xb9\xb8\xf4\xf5\x15\x12\x93\x8a\x4b\x8a\x12\x93\x4b\x14\x4a\x2a\x0b\x52\xb9\x40\x04\x48\x1d\x44\x81\x02\x50\xaa\x14\x28\x55\x5d\xcb\x05\x08\x00\x00\xff\xff\xab\x46\xfc\x30\x44\x00\x00\x00")

func templatesAbstractTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAbstractTmpl,
		"templates/abstract.tmpl",
	)
}

func templatesAbstractTmpl() (*asset, error) {
	bytes, err := templatesAbstractTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/abstract.tmpl", size: 68, mode: os.FileMode(436), modTime: time.Unix(1482408760, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesAnyTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x24\x8c\x31\xcb\x02\x31\x0c\x86\xf7\xfc\x8a\xd0\xf9\xb8\xee\xdf\xf6\xe1\xaa\xe2\xe8\x78\xa5\x86\xa3\x68\xd2\x52\x23\x58\x4a\xff\xbb\xa9\x66\x08\x4f\xde\xbc\x3c\x25\xc4\x7b\xd8\x09\x7b\x5f\x2f\x3f\x3c\x07\xa6\x31\x00\x12\x97\x5c\x15\x1d\x49\xcc\xb7\x24\xbb\x7f\xf3\xc3\x01\x78\x8f\x41\x1a\x6a\x2b\x04\x73\xe1\xbf\x5d\x4f\xad\xaf\xa8\xd8\x01\x6d\xae\xa7\xe3\x74\xa0\xf5\xd7\x09\xdf\xf0\x90\x45\x49\x74\x36\xcd\x65\xc1\x66\xef\x3f\xb7\x24\x11\xaa\x86\x4b\xe6\xa4\xc4\x45\x9b\xdb\x60\xc0\x27\x00\x00\xff\xff\xe0\x82\x28\xf8\x97\x00\x00\x00")

func templatesAnyTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAnyTmpl,
		"templates/any.tmpl",
	)
}

func templatesAnyTmpl() (*asset, error) {
	bytes, err := templatesAnyTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/any.tmpl", size: 151, mode: os.FileMode(436), modTime: time.Unix(1482830186, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesAttributeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x4d\xbd\x0a\x02\x31\x0c\x9e\xed\x53\x84\xce\x72\xb7\xbb\x39\xba\x88\x83\x38\x5f\x3c\x83\x14\xdb\xb3\xf4\x52\x50\x4a\xde\xdd\xc4\x82\x66\xc8\xcf\xf7\x97\x8c\xf3\x03\xef\x04\xad\x0d\xa7\xbe\x1e\x31\x91\x88\x6b\xad\xe0\xa2\xc4\x70\x48\xf9\x59\x78\x55\x08\xb4\xc2\xf7\x32\xf9\x3e\x06\x54\x14\xfc\xdf\x2a\xe2\xd5\x47\xcb\x4d\xc5\xe3\x08\xc8\x5c\xc2\xb5\x32\x01\xbf\x33\x39\x6b\x66\x3c\xeb\xec\x4f\x60\xe5\x52\x67\x4d\x73\x9b\x0b\xc6\xfa\x63\x95\x99\x5e\x29\xee\x2c\xba\x2b\xb7\x96\xe5\x27\x27\xee\x13\x00\x00\xff\xff\xff\xdd\xcc\x8e\xb1\x00\x00\x00")

func templatesAttributeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAttributeTmpl,
		"templates/attribute.tmpl",
	)
}

func templatesAttributeTmpl() (*asset, error) {
	bytes, err := templatesAttributeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/attribute.tmpl", size: 177, mode: os.FileMode(436), modTime: time.Unix(1485857447, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesAttribute_groupTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8e\x31\xae\x83\x30\x0c\x86\xf7\x9c\xc2\xca\xfc\x1e\xec\xdd\x18\x3a\x74\x69\x3b\xf4\x00\xb8\x34\x42\x51\x09\x44\x89\x23\x15\x45\xbe\x7b\x0d\xa4\x90\xc9\x7f\xec\xcf\x9f\x3d\x76\x6f\xec\x0d\xe4\x5c\xdd\xb7\xf2\x8a\xce\x30\x2b\x95\x73\xc0\x51\x3a\xd5\xc5\xf9\x29\x50\x84\x7f\xf9\x05\x79\x76\xcd\x0b\xd1\x0c\x16\x23\x33\xe8\x83\x66\xd6\x42\x9a\xf1\x25\xc3\x75\x0d\x48\x14\xec\x33\x91\x81\x3e\x4c\xc9\x2b\x9a\xfd\xea\xda\x24\x10\x29\xa4\x4e\x56\x1d\xb2\xe6\x07\xc4\x62\x93\xe1\x87\x40\x05\x28\x49\xaa\xf6\xe3\x86\x93\xde\x57\xfd\x2d\x26\x49\x37\x67\xe9\xec\x3c\xcd\x72\x48\xbb\x5f\xc2\xea\x1b\x00\x00\xff\xff\xb0\xf2\xb6\x79\xe8\x00\x00\x00")

func templatesAttribute_groupTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAttribute_groupTmpl,
		"templates/attribute_group.tmpl",
	)
}

func templatesAttribute_groupTmpl() (*asset, error) {
	bytes, err := templatesAttribute_groupTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/attribute_group.tmpl", size: 232, mode: os.FileMode(436), modTime: time.Unix(1485858250, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesBase_typeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xa8\xae\xd6\x0b\x80\x30\xfd\x12\x73\x53\x6b\x6b\xb9\xb8\xaa\xab\x8b\x12\xf3\x80\x32\x7a\x9e\xb9\x05\xf9\x45\x25\xc5\x40\x31\x05\x20\xc8\x04\xf3\x40\xea\x1d\x73\x32\x13\x81\xa2\x0a\x4a\x08\xbd\xb5\xb5\x4a\x40\x7d\xa9\x79\x29\x20\x03\xf4\xf5\x15\x92\x12\x8b\x53\x15\x4a\x2a\x0b\x52\xb9\x40\x04\x48\x13\xc4\x74\x10\x2b\x04\x28\x02\x54\x06\x08\x00\x00\xff\xff\x53\x7a\xcd\x90\x81\x00\x00\x00")

func templatesBase_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesBase_typeTmpl,
		"templates/base_type.tmpl",
	)
}

func templatesBase_typeTmpl() (*asset, error) {
	bytes, err := templatesBase_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/base_type.tmpl", size: 129, mode: os.FileMode(436), modTime: time.Unix(1485857447, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesComplex_elementTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\x41\x4f\x03\x21\x10\x85\xef\xfc\x8a\x09\xe7\x76\x7b\xf7\x56\x13\x63\xbc\xa8\x31\xc6\x73\x47\x3a\x2a\x11\x76\x09\x0c\x49\x1b\xc2\x7f\x77\x16\x2a\x1e\x2c\x27\x86\x37\xef\x7d\x2f\x04\x34\xdf\xf8\x49\x50\xca\xf4\xdc\xaf\x8f\xe8\xa9\x56\xa5\x4a\x89\x38\x8b\x32\x3d\xf8\xb0\x44\x4e\xb0\x95\x57\x90\x63\xdb\xbc\x3a\xf6\xce\x62\xaa\x15\xf4\x9f\xbb\x56\x2d\x4e\x9a\x8f\xb2\xbc\xdb\x81\x59\x7c\x70\x74\x02\x72\xe4\x69\x66\xc5\xe7\xd0\x58\x1d\x02\x89\x63\x36\x12\xd5\x72\xdf\xd0\xe5\x26\xde\x62\x5a\xc5\xc3\xc9\xbb\x1b\xbd\x31\x5f\x18\x8f\xc8\xa8\x0f\x6d\x6b\xd4\xda\x33\x47\xfb\x9e\x99\xd2\xa5\x57\x57\xb7\x30\xbd\x0a\xe4\x02\x90\xb4\x75\x1a\x69\x03\xbd\x41\xb1\xcb\xf4\xe4\x2d\xdf\xf9\xc0\x67\x29\xfe\x0b\xe8\xed\xaf\xc3\xee\xe3\x92\xc3\x3f\xe2\x0b\x7d\x0c\x87\xb8\xdb\x57\x55\xf5\x13\x00\x00\xff\xff\xa9\x6d\x49\x62\x5c\x01\x00\x00")

func templatesComplex_elementTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesComplex_elementTmpl,
		"templates/complex_element.tmpl",
	)
}

func templatesComplex_elementTmpl() (*asset, error) {
	bytes, err := templatesComplex_elementTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/complex_element.tmpl", size: 348, mode: os.FileMode(436), modTime: time.Unix(1487587140, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesComplex_typeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x90\xc1\x4a\xc4\x30\x10\x86\xef\x7d\x8a\xa1\x47\x71\xbb\x07\x6f\xde\x56\x58\xc4\x8b\x8a\x78\x13\x61\x63\x1d\xa5\xd8\xb4\x21\x99\xe2\x96\x90\x77\xf7\x4f\x13\xa3\xab\x82\x78\xb1\x87\x92\x99\xc9\x37\xdf\x4f\x8c\x6a\x5f\xd4\x33\x93\xf7\xcd\x75\x3a\x5e\x2a\xcd\x21\x54\x95\xf7\x56\x0d\x98\x34\x17\xda\x8c\x56\x1c\xad\xd0\x25\x7c\xdd\x52\x47\x62\xd3\x77\xca\x85\x40\xf5\x07\x1d\x42\x0d\x92\x87\xc7\xe5\xfa\x7a\x4d\xed\xa8\x4d\xcf\x7b\x92\xd9\x70\x15\x7f\x11\x4c\x0e\x72\x62\xa7\x16\x9b\x96\xb5\x68\x9f\x29\xc7\x59\x52\xec\x1b\x11\xdb\x3d\x4c\xc2\x2e\x4f\xd2\x74\x45\xcd\x2d\x96\xe5\x45\x60\x63\x85\xd3\x6e\xaf\xfb\xd3\xba\x28\x8e\x15\x70\x54\x57\xba\x93\xad\x36\x32\x23\xdf\x2e\x0b\xde\x43\x1e\xe8\xb6\x3d\x6b\x1e\xe4\x17\x59\x0a\x7a\x28\x73\x78\x4a\x34\x8b\xfa\x2f\xd6\x1b\x7e\xfa\x67\x63\x79\xd6\x73\x3b\x4e\xe6\x9b\x1c\x81\x0a\xf1\x33\x3f\xcc\x9f\x18\x54\x74\x77\x7f\xf4\x7a\xd2\xc6\xc1\x17\x2e\x54\x6f\x01\x00\x00\xff\xff\xae\x89\x85\x64\x65\x02\x00\x00")

func templatesComplex_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesComplex_typeTmpl,
		"templates/complex_type.tmpl",
	)
}

func templatesComplex_typeTmpl() (*asset, error) {
	bytes, err := templatesComplex_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/complex_type.tmpl", size: 613, mode: os.FileMode(436), modTime: time.Unix(1487587832, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesEnumerationTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8e\xb1\xca\xc3\x30\x10\x83\xf7\x3c\xc5\x91\xe9\xff\x87\xe4\x0d\x3a\xb4\xd0\xa1\x4b\xe9\x50\xba\x96\x23\x35\xc5\x34\x76\x8c\xed\x0c\xe5\xb8\x77\xaf\x9c\x18\xec\x49\xe8\xa4\xcf\x0a\x3c\x7d\xf8\x6d\x48\x64\xbc\xed\xf2\xca\xce\xa8\x76\x22\x91\x3d\x0e\xe3\xc5\x85\x25\xe6\x04\xcb\x6e\xaa\x44\x8f\xb3\x65\x38\xd4\xb7\x9a\x6a\x8f\x8e\xf1\x2f\x04\xf3\x37\x54\x62\x34\x3e\xab\x42\xee\xd4\x62\x9e\x38\x15\x7e\x37\x2d\x3e\x65\xfa\x6b\x1f\x9d\xfd\xea\x4c\xe4\x6c\x71\x40\x80\xf0\x44\x06\xaa\xd5\x27\xaa\x77\x70\x1b\xa8\xaa\xc3\xb6\xe2\xc1\xf3\xda\x36\xd0\x00\xc0\xff\x2f\x00\x00\xff\xff\xbd\x0e\x05\x6e\xdc\x00\x00\x00")

func templatesEnumerationTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEnumerationTmpl,
		"templates/enumeration.tmpl",
	)
}

func templatesEnumerationTmpl() (*asset, error) {
	bytes, err := templatesEnumerationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/enumeration.tmpl", size: 220, mode: os.FileMode(436), modTime: time.Unix(1486387923, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesList_typeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8c\xbf\x0a\xc2\x30\x10\xc6\xf7\x3c\xc5\x91\x51\xa4\xdd\xdd\x1c\x5d\xc4\x41\x5c\x44\xe8\x91\x06\x0d\x26\x35\x24\x29\x28\xe1\xde\xdd\x2f\xed\xd0\x1b\x8e\xbb\xef\xcf\x2f\xb2\x79\xf3\xd3\x52\xad\xdd\x65\x3d\xcf\x1c\xac\x88\xaa\x35\xf1\x04\xa3\x3b\x85\xf8\x49\x25\x43\x22\x8c\x5b\xbe\x16\x3f\x7a\xc7\x50\x49\x6f\x55\x11\x8d\x9e\x9d\x46\x84\xfb\x9e\xbc\xcb\x85\xca\x2f\x5a\xd5\x56\xeb\xac\x6c\xca\x25\xcd\x06\x90\x85\x78\x63\x3f\x5b\xba\x3f\x76\xf0\xaf\xc8\xc1\x1f\xbe\xc1\x1f\xf4\xde\xbc\x38\x8d\x5c\x58\x0f\x4a\xfe\x01\x00\x00\xff\xff\xfe\x5a\x7f\xe9\xa8\x00\x00\x00")

func templatesList_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesList_typeTmpl,
		"templates/list_type.tmpl",
	)
}

func templatesList_typeTmpl() (*asset, error) {
	bytes, err := templatesList_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/list_type.tmpl", size: 168, mode: os.FileMode(436), modTime: time.Unix(1486387923, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSimple_typeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xa8\xae\xd6\x0b\x80\x30\xfd\x12\x73\x53\x6b\x6b\xb9\xb8\xaa\xab\x8b\x12\xf3\x80\x32\x7a\x9e\xb9\x05\xf9\x45\x25\xc5\x40\x31\x05\x20\xc8\x04\xf3\x40\xea\x1d\x73\x32\x13\x81\xa2\x0a\x4a\x08\xbd\xb5\xb5\x4a\x40\x7d\xa9\x79\x29\x20\x03\xf4\xf5\x15\x8a\x81\xaa\x73\x52\x15\x4a\x2a\x0b\x52\xb9\x40\x04\x48\x1b\xc4\x7c\x10\x2b\x04\x28\x02\x54\x08\x08\x00\x00\xff\xff\xd0\x86\xdb\xce\x83\x00\x00\x00")

func templatesSimple_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSimple_typeTmpl,
		"templates/simple_type.tmpl",
	)
}

func templatesSimple_typeTmpl() (*asset, error) {
	bytes, err := templatesSimple_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/simple_type.tmpl", size: 131, mode: os.FileMode(436), modTime: time.Unix(1487587140, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesUnion_typeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xa8\xae\xd6\x0b\x80\x30\xfd\x12\x73\x53\x6b\x6b\xb9\xb8\xf4\xf5\x15\x4a\xf3\x32\xf3\xf3\x14\x4a\x2a\x0b\x52\xb9\x40\x04\x48\x11\x44\x56\xa1\xb8\xa4\xa8\x34\xb9\x44\xa1\x9a\x4b\x01\x08\x80\xc2\x21\x40\x69\xa0\xa6\x5a\x2e\x40\x00\x00\x00\xff\xff\x50\xd2\xe7\x86\x50\x00\x00\x00")

func templatesUnion_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesUnion_typeTmpl,
		"templates/union_type.tmpl",
	)
}

func templatesUnion_typeTmpl() (*asset, error) {
	bytes, err := templatesUnion_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/union_type.tmpl", size: 80, mode: os.FileMode(436), modTime: time.Unix(1485857447, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/abstract.tmpl": templatesAbstractTmpl,
	"templates/any.tmpl": templatesAnyTmpl,
	"templates/attribute.tmpl": templatesAttributeTmpl,
	"templates/attribute_group.tmpl": templatesAttribute_groupTmpl,
	"templates/base_type.tmpl": templatesBase_typeTmpl,
	"templates/complex_element.tmpl": templatesComplex_elementTmpl,
	"templates/complex_type.tmpl": templatesComplex_typeTmpl,
	"templates/enumeration.tmpl": templatesEnumerationTmpl,
	"templates/list_type.tmpl": templatesList_typeTmpl,
	"templates/simple_type.tmpl": templatesSimple_typeTmpl,
	"templates/union_type.tmpl": templatesUnion_typeTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"abstract.tmpl": &bintree{templatesAbstractTmpl, map[string]*bintree{}},
		"any.tmpl": &bintree{templatesAnyTmpl, map[string]*bintree{}},
		"attribute.tmpl": &bintree{templatesAttributeTmpl, map[string]*bintree{}},
		"attribute_group.tmpl": &bintree{templatesAttribute_groupTmpl, map[string]*bintree{}},
		"base_type.tmpl": &bintree{templatesBase_typeTmpl, map[string]*bintree{}},
		"complex_element.tmpl": &bintree{templatesComplex_elementTmpl, map[string]*bintree{}},
		"complex_type.tmpl": &bintree{templatesComplex_typeTmpl, map[string]*bintree{}},
		"enumeration.tmpl": &bintree{templatesEnumerationTmpl, map[string]*bintree{}},
		"list_type.tmpl": &bintree{templatesList_typeTmpl, map[string]*bintree{}},
		"simple_type.tmpl": &bintree{templatesSimple_typeTmpl, map[string]*bintree{}},
		"union_type.tmpl": &bintree{templatesUnion_typeTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

