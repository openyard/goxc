// Code generated by go-bindata.
// sources:
// templates/abstract.tmpl
// templates/any.tmpl
// templates/attribute.tmpl
// templates/attribute_group.tmpl
// templates/base_type.tmpl
// templates/complex_element.tmpl
// templates/complex_type.tmpl
// templates/enumeration.tmpl
// templates/list_type.tmpl
// templates/root_type.tmpl
// templates/simple_type.tmpl
// templates/union_type.tmpl
// DO NOT EDIT!

package goxc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesAbstractTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x24\x8a\x41\x0a\xc2\x40\x0c\x45\xf7\x39\xc5\xbf\x80\x9d\x33\xb8\x72\x27\x22\xe2\x3e\x8e\xa1\x16\xb1\x1d\x32\x71\xb4\x84\xdc\x5d\xec\xec\x1e\xef\xbd\x94\x70\x90\x59\x94\x4d\xee\xf8\x4c\xf6\xc0\xb8\x7c\x33\x9a\xfb\x70\x15\xad\xd3\x32\x47\x60\x07\x95\x06\xf7\xe1\x2c\x2d\x82\x0a\xe7\x27\x8f\xf2\x17\xa7\x8e\x47\x7e\x49\x04\x51\x4a\xd8\xdf\xaa\x29\x67\xbb\xac\x45\xc8\xd6\xb2\x6d\xbd\xa3\x9a\xbe\xb3\xc1\x83\x7e\x01\x00\x00\xff\xff\x79\x35\x37\xc6\x77\x00\x00\x00")

func templatesAbstractTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAbstractTmpl,
		"templates/abstract.tmpl",
	)
}

func templatesAbstractTmpl() (*asset, error) {
	bytes, err := templatesAbstractTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/abstract.tmpl", size: 119, mode: os.FileMode(436), modTime: time.Unix(1521197199, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesAnyTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x24\x8c\x31\x4b\x04\x31\x10\x85\xfb\xf9\x15\x8f\xad\xcf\x4d\x6f\x27\x16\x36\x2a\x22\x22\x96\xb7\xec\x0d\x6b\x30\x33\x09\xb9\x71\x4d\x08\xf9\xef\x92\xbd\xee\x7b\x1f\x8f\xcf\x39\x3c\xb1\x72\x5e\x8c\x2f\xf8\xf3\xf6\x8d\x2d\x96\x15\x7b\x6b\xf3\x27\xe7\xab\x8f\xda\x3b\xee\x90\x79\x47\x6b\xf3\x3b\xef\xbd\x53\x5a\xd6\x9f\x65\xe3\x21\xde\x6e\xf8\xba\x08\xf7\x4e\xe4\x25\xc5\x6c\x98\x58\xd7\x78\xf1\xba\xb9\x22\x61\x22\x72\x0e\x0f\x5a\xf1\x51\x13\x93\xd5\xc4\xc7\xba\x5a\xfe\x5d\x0d\x8d\x00\xe0\xeb\xe5\x79\x34\x50\x24\xcc\x03\x0e\xf9\x18\xd5\x58\x6d\x3c\xbd\x6e\x00\xce\x45\xc2\xfd\x74\xf2\xaa\x9c\x8b\x84\x53\x14\x6f\x2c\xc9\xea\x74\xa6\x4e\xff\x01\x00\x00\xff\xff\xbb\xff\xfa\x1f\xcb\x00\x00\x00")

func templatesAnyTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAnyTmpl,
		"templates/any.tmpl",
	)
}

func templatesAnyTmpl() (*asset, error) {
	bytes, err := templatesAnyTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/any.tmpl", size: 203, mode: os.FileMode(436), modTime: time.Unix(1521197199, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesAttributeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8e\x41\x4f\x83\x40\x10\x85\xcf\xce\xaf\x78\xe9\x09\x8c\xc2\xdd\xc4\x43\x4f\xc6\x4b\x63\xd4\xf4\xdc\x95\x8e\x48\x84\x85\x2c\x03\xb4\x99\xcc\x7f\x37\x2c\xa4\xa6\xbd\xed\xee\x7b\xef\xdb\x2f\xcf\xf1\xc2\x9e\x83\x13\x3e\x62\xaa\xe4\x07\x65\x7b\x2a\x30\xaa\x66\x7b\x0e\x7d\xd5\x7a\x33\x3c\x22\xf0\x08\xd5\xec\x9d\x47\x33\xea\x5c\xf1\xeb\x4a\x9e\x1f\xde\x96\xe3\xce\x35\x6c\x46\xaa\xc1\xf9\x92\x91\xbd\x36\x5d\x1b\xa4\x37\x23\x00\xa8\xe2\x6d\xae\x6f\xeb\xca\xf5\x66\xd8\xfc\x4f\xcd\x36\xa4\xca\xfe\x68\x46\x79\x8e\xad\x48\xa8\xbe\x06\x61\x92\x73\x17\xbf\xf8\x3c\x77\x2b\x1f\xbd\x84\xa1\x10\x28\xdd\xed\x5d\x3d\x30\xee\xd7\xd8\x0c\x87\x53\x53\x3f\xcd\xd8\xa5\xfa\xe0\x44\xc2\xe6\x40\x46\xf4\x3d\xf8\x02\x3b\x9e\xae\x50\x49\x7a\x19\xaf\x6c\x8d\xaa\x81\x65\x08\x1e\x9e\xa7\xe4\x2a\x4e\x2f\xa4\xa4\xe1\x9b\x69\x8a\x0f\x96\x28\x94\x8c\x37\x5a\xe9\x8a\x6d\x38\x5b\x8c\x9f\x11\x2b\x64\x7f\x01\x00\x00\xff\xff\x8c\xe7\x23\xd2\x78\x01\x00\x00")

func templatesAttributeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAttributeTmpl,
		"templates/attribute.tmpl",
	)
}

func templatesAttributeTmpl() (*asset, error) {
	bytes, err := templatesAttributeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/attribute.tmpl", size: 376, mode: os.FileMode(436), modTime: time.Unix(1521198445, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesAttribute_groupTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x90\xc1\x4e\xc3\x30\x0c\x86\xef\x79\x0a\xab\xa7\x16\xb1\xf6\x8e\xc4\x61\x07\x34\x71\x19\x13\x20\xce\x0b\x9d\x19\x11\x4b\x1a\xb9\x4e\xb7\xc9\xf2\xbb\xa3\x65\x55\xb7\xde\xe2\xc4\xfe\xbf\x2f\x6e\x1a\x58\x61\x40\xb2\x8c\x3b\x38\x3a\xfe\x85\x7d\x77\x6a\x61\x10\xa9\xbf\x90\x7a\xd7\x05\x55\x58\x00\xe1\x00\x22\xf5\x3b\x0e\xaa\x26\xda\xf6\xcf\xee\xf1\x72\xb1\xb9\x1e\xd7\xd6\xa3\xaa\x31\x22\x64\xc3\x1e\xa1\x7e\xf5\xb1\x23\xee\x61\xa1\x6a\x00\x00\x5c\xae\x2f\x13\xcb\x83\xb3\xbd\x2a\x14\xb7\x69\xd5\xc2\x88\x60\xd8\xa9\x9a\xa6\x81\x25\x33\xb9\xef\xc4\xb8\xa2\x2e\x45\xc3\xe7\x98\x51\x57\x06\xf4\x4c\xa9\x65\x90\x1b\x6b\xea\xef\x47\x98\x48\xfd\x79\x8e\xa3\x14\x3c\x8c\xa5\x2a\x6c\x4f\xfe\xf0\x54\x4c\x59\x8f\x96\x99\x44\xea\x37\xef\xf8\xc5\x47\x3e\xab\x16\xdb\xc9\x44\x8d\xf9\x49\xa1\x85\x35\x1e\xa7\x89\xb2\xca\x71\x63\xb2\x64\x1a\x21\x27\x0a\x10\xf0\x58\x4e\x4f\x95\xb9\x5f\xc6\x4c\x30\x67\x96\x1e\x73\xd0\xc6\x12\x06\x56\xad\xe0\x03\x79\xa6\x5d\x0e\xf6\x90\xf0\x4e\xbe\x1a\x71\x1e\xeb\xf9\xff\x9e\x21\xb7\x1a\xbd\x9a\x5f\x56\xfe\x1f\x00\x00\xff\xff\xf8\xe0\x11\x32\xd5\x01\x00\x00")

func templatesAttribute_groupTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAttribute_groupTmpl,
		"templates/attribute_group.tmpl",
	)
}

func templatesAttribute_groupTmpl() (*asset, error) {
	bytes, err := templatesAttribute_groupTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/attribute_group.tmpl", size: 469, mode: os.FileMode(436), modTime: time.Unix(1521198016, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesBase_typeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x8e\x41\x4b\xc4\x30\x14\x84\xef\xf9\x15\xc3\x1e\xa4\x15\x6c\xef\x82\x07\xbd\x88\x97\x45\x44\xbc\x3f\xba\x63\x2d\x6e\xd3\x92\xa6\x59\x97\xc7\xfb\xef\x92\x14\xac\xb7\xc9\xcc\x7c\x93\xd7\xb6\x78\xa6\x67\x90\xc8\x13\x2e\x43\xfc\x42\x3f\xfd\x74\x48\xaa\xcd\x07\xc3\x32\x4c\xde\x0c\x77\x08\x4c\x50\x6d\xde\x98\xcc\xdc\x2c\xdd\xb7\xf4\xcc\xc6\xeb\x26\x8f\x32\xd2\xcc\x39\xd5\x20\xbe\x27\x9a\x97\x71\x9e\x42\x5c\xcc\x1c\x00\x0c\xe5\x95\xfb\x8f\xe7\x41\x16\x33\x1c\x76\xd6\xec\xe0\x54\xe9\x4f\x79\xa0\x6d\xf1\x24\x0b\xdf\xaf\x33\x5d\xbc\xce\xe5\x8f\x6d\x3c\xab\x6c\xe7\xd6\xe7\xea\x3b\x1c\x79\xf9\x0b\xab\x24\xe7\x95\x7b\xa5\xc6\xed\x3f\xb0\xdc\x30\x12\xf7\x0f\xa8\x76\xbf\xae\x6e\x0a\x55\x97\x38\x30\xae\xc1\x63\xa4\xb3\xdf\x00\x00\x00\xff\xff\xf9\x5f\x9d\x36\x13\x01\x00\x00")

func templatesBase_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesBase_typeTmpl,
		"templates/base_type.tmpl",
	)
}

func templatesBase_typeTmpl() (*asset, error) {
	bytes, err := templatesBase_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/base_type.tmpl", size: 275, mode: os.FileMode(436), modTime: time.Unix(1521199363, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesComplex_elementTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x91\xcd\x6e\xea\x30\x10\x85\xf7\x7e\x8a\x51\x56\xe4\x0a\x9c\xfd\x95\xba\xa0\x15\x42\xdd\x50\x44\x2b\xd6\xb8\xc9\x00\x51\x63\xc7\x72\x26\x01\x64\xcd\xbb\x57\xb1\x23\x53\xd4\xee\x32\x99\x9f\xef\x9c\xe3\xa2\x80\x35\x1a\x74\x8a\xb0\x82\x4b\x4d\x67\x38\xb5\xd7\x12\x06\xef\xe5\x1e\x5d\x57\xb7\x86\x19\x16\xe0\x70\x00\xef\xe5\x0e\x07\x66\x61\x55\xf9\xa5\x4e\x38\xfe\xd8\xc6\xcf\x8d\xd2\xc8\x2c\x84\xf7\x4e\x99\x13\x82\x7c\xd5\xb6\x75\xd4\xc1\x82\x59\x00\x00\xd4\xa1\x1e\x37\x96\x4d\xad\x3a\x66\xc8\xee\xdb\xcc\x99\xf0\x1e\x4d\xc5\x2c\x8a\x02\x5e\x5a\x6d\x1b\xbc\xae\x1a\xd4\x68\x48\xd0\xcd\x06\x54\x64\x40\x47\xae\x2f\x09\x7c\x38\xbb\x57\x4d\x8f\xf0\xcf\x7b\xf9\xac\xba\xb1\x7b\xb8\xea\xe6\x7f\x36\x2f\xcf\xca\x55\x8a\x54\x76\x08\x63\x49\xd6\x92\xc8\xd5\x9f\x3d\x61\x37\xe9\x8a\xdd\x05\xc8\x8f\x9b\x9d\x5c\x84\x73\x63\x99\xce\x25\xf8\x5c\x11\x39\xef\xe5\x9b\xae\x69\xa5\x2d\xdd\x98\x13\x21\xca\xff\x9b\xb6\x76\x6d\x6f\x7f\x21\x77\x78\x4c\x1b\x68\xaa\x90\x15\x0b\x71\xec\x4d\x09\x1b\xbc\x24\xea\x2c\x0f\x92\x26\x75\xd1\xb8\x43\xea\x9d\x01\x83\x97\x59\x6a\xe5\xe2\xe7\x0b\x3c\x58\x0d\x37\x67\x3a\x46\xb5\x55\x0e\x0d\x31\xe7\xf0\x8e\x34\x79\x9d\x48\x43\xca\x33\x06\x90\x4f\x38\x8d\xf2\x61\x10\x9e\x20\x8c\x0a\x16\x77\xed\xdf\x01\x00\x00\xff\xff\x6c\x98\xd0\x62\x4b\x02\x00\x00")

func templatesComplex_elementTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesComplex_elementTmpl,
		"templates/complex_element.tmpl",
	)
}

func templatesComplex_elementTmpl() (*asset, error) {
	bytes, err := templatesComplex_elementTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/complex_element.tmpl", size: 587, mode: os.FileMode(436), modTime: time.Unix(1521198672, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesComplex_typeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x93\x41\x6f\xd3\x40\x10\x85\xef\xfb\x2b\x46\x39\x25\x51\xe3\x1c\xb8\x21\x71\x08\xa8\xaa\xb8\x94\x2a\x20\x2e\x08\xa9\x8b\x3d\x09\x16\xde\xf5\x6a\x3d\x4e\x62\xad\xe6\xbf\x23\xaf\xd7\x8b\x9d\xda\x2d\x95\xe0\x56\x77\x76\xde\xf7\x66\xe6\x65\xbb\x85\x3b\xd4\x68\x25\x61\x06\xe7\x9c\x7e\xc2\xb1\xbc\xa4\x70\x72\x2e\xf9\x8a\xb6\xca\x4b\xcd\x0c\x1b\xb0\x78\x02\xe7\x92\x3d\x9e\x98\x85\x91\xe9\x2f\x79\xc4\xf6\x1f\x0f\xdd\x9f\xf7\x52\x21\xb3\x10\xce\x59\xa9\x8f\x08\xc9\x47\x65\x4a\x4b\x15\x6c\x98\x05\x00\x40\xee\xbf\xdb\x8e\x5d\x91\xcb\x8a\x19\x16\x7f\xba\x99\x17\xc2\x39\xd4\x99\x7f\xbe\xdd\xc2\x87\x52\x99\x02\x2f\x5f\x1a\x83\x82\x1a\xe3\x49\x1d\x02\x2a\xb2\x75\x4a\xe0\xbc\xaa\x73\xc9\x7b\x59\x61\x60\x44\xf8\x8e\xc8\xe6\x3f\x6a\xc2\x2a\x54\xba\xea\x06\x92\x56\x31\x08\xad\x9d\xf3\x9f\xcc\xf0\x78\x51\xc5\xdb\x45\x64\xdc\x48\x22\xeb\x5c\xf2\x49\xe5\x74\xab\x0c\x35\xcc\x8b\xc7\x40\xe8\x4d\x8e\x78\xb7\x05\x2a\xd4\xf4\x1c\xad\x1d\xdc\x5a\xd9\x30\xaf\xa3\xe9\x31\xb7\x32\x32\x45\xe6\xe8\xe2\x35\x06\xf6\x78\x78\x69\xd4\x7f\x8d\x8c\x3b\xbe\xb3\x65\x6d\x9e\xd0\xf7\x78\x88\x1d\xd3\xfd\xba\x19\xf4\xec\x74\x03\xdf\xbe\xaf\xcf\x6f\xd2\xb6\x70\xd5\xe7\x73\x95\x1f\xa0\xbf\xf5\xa1\xd6\x29\xdc\xe3\x39\xfa\x5e\xae\x86\x23\x76\xd1\xb0\x48\xb5\xd5\xa0\xf1\xbc\x8c\xa5\x95\xe0\x36\x67\xc5\xb3\x2a\xfd\xc1\x26\x54\xba\x52\x50\xd1\xd9\x28\xf0\xa3\xcc\x79\xed\xa5\x42\x2f\xf8\x20\x2d\x6a\x62\x5e\xc1\x67\xa4\x10\xba\x40\x3c\xc9\xa2\xc6\x41\x12\x57\x01\xab\x30\x19\x3d\x84\x77\xe0\x9f\xf6\x64\xbf\x16\x31\x95\xbf\x6e\x51\x21\x6a\x73\x3e\x76\x59\x36\xe7\x23\x2c\x6a\xde\x87\x34\x06\x75\xb6\xbc\xae\xdc\x74\x06\x9f\x6e\xf8\x55\x5b\x78\x91\xde\x6f\xe1\xaf\x27\x1b\x26\x63\x56\xf5\x2a\x24\x83\xc3\x5f\x3f\x1e\x9c\x7e\xea\x10\xe1\x77\xf8\x1f\x07\x1f\x50\x7f\x07\x00\x00\xff\xff\x54\x7c\x18\x98\xba\x05\x00\x00")

func templatesComplex_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesComplex_typeTmpl,
		"templates/complex_type.tmpl",
	)
}

func templatesComplex_typeTmpl() (*asset, error) {
	bytes, err := templatesComplex_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/complex_type.tmpl", size: 1466, mode: os.FileMode(436), modTime: time.Unix(1521201453, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesEnumerationTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8e\xc1\x4a\x04\x31\x10\x44\xef\xf9\x8a\x62\x4f\x7a\x98\xec\x17\x78\x50\x10\xf1\x22\x22\xb2\x57\x09\xb3\xcd\x18\xdc\xe9\x0c\x49\x76\x74\x69\xea\xdf\x25\xbb\x03\xb9\x15\x4d\xd7\xab\xb7\xdf\xe3\x45\x54\x72\xa8\x72\xc4\x6f\xac\xdf\x98\xd2\xdf\x88\xd5\xcc\x1f\x24\x97\x98\x94\xc4\x80\x2c\x2b\xcc\xfc\x87\xac\xa4\x5b\xc2\xf8\x13\x26\x69\x87\xf7\x5b\x7c\x0b\xb3\x90\xce\x2c\x07\x9d\x04\xfe\x75\x5e\x52\xae\x85\x74\xf1\x9a\xda\xeb\xe3\x29\x86\x42\x62\xd7\x6b\xe4\xce\x99\x89\x1e\x49\x57\x2f\xcb\x46\xcc\xa2\x95\x34\xf3\x37\x6a\x3b\x3e\x85\xd2\xf8\x6e\x4c\x5a\x2a\xee\xfa\xd0\xb3\x9e\xe7\x26\x1f\x93\xb6\x35\x00\x30\x1b\xb0\x55\xbf\xcc\xfc\xe7\x65\x91\x0e\xda\xd2\xc3\xd5\xe2\x10\x4e\xe7\xee\x80\x81\x74\xf7\xff\x01\x00\x00\xff\xff\x56\x20\x91\x02\x10\x01\x00\x00")

func templatesEnumerationTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEnumerationTmpl,
		"templates/enumeration.tmpl",
	)
}

func templatesEnumerationTmpl() (*asset, error) {
	bytes, err := templatesEnumerationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/enumeration.tmpl", size: 272, mode: os.FileMode(436), modTime: time.Unix(1521194725, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesList_typeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x8e\x41\x6b\x83\x40\x10\x85\xef\xfb\x2b\x1e\x9e\x34\xa4\x7a\x2f\xf4\x90\x53\x29\x94\x50\x4a\xc9\xa5\x14\xb2\xb8\x53\x23\xd5\x75\x59\x57\x4d\x18\xe6\xbf\x17\xd7\x56\x73\xdb\x9d\x99\xef\x7b\xaf\x28\xf0\x4c\x96\xbc\x0e\x64\x30\xd5\xe1\x82\xaa\xbb\x96\x18\x99\xf3\x13\xf9\xbe\xee\xac\x08\x1e\xe0\x69\x04\x73\xfe\x4e\xa3\x88\x72\xba\xfc\xd1\x15\xcd\x83\xb7\xe5\x79\xd4\x2d\x89\x28\x66\xaf\x6d\x45\xc8\x5f\x5a\xd7\xf9\xd0\x8b\x28\x00\xa8\xe3\x6f\x3e\x3f\x34\xb5\xee\x45\x90\x6c\xa8\x48\xa2\x98\xc9\x1a\x11\x55\x14\x78\xad\xfb\xf0\x71\x73\xa4\xc2\xcd\xc5\x84\x45\x8d\x3e\xf8\xa1\x0c\xe0\x28\x3c\xe9\x66\x20\x7c\x7e\xed\x98\xf3\xf9\x58\x04\xe7\x6b\xdb\x3c\x26\xfb\xf2\xa2\xbd\xd1\x41\x27\x67\x25\x4a\x7d\x0f\xb6\xc4\x91\xa6\x55\x93\x66\xd8\x6d\xce\x45\xe6\x29\x0c\xde\xc2\xd2\x94\xae\xab\x6c\xa5\xd3\x96\xee\x90\x0c\x07\x63\x62\x7a\x3a\xc6\x0e\x5b\x83\xec\x4f\xd7\x52\xbe\xd4\x7b\x82\x76\x8e\xac\x49\xff\x27\x7b\x44\x26\x53\xf2\x1b\x00\x00\xff\xff\x97\x4d\x06\x30\x75\x01\x00\x00")

func templatesList_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesList_typeTmpl,
		"templates/list_type.tmpl",
	)
}

func templatesList_typeTmpl() (*asset, error) {
	bytes, err := templatesList_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/list_type.tmpl", size: 373, mode: os.FileMode(436), modTime: time.Unix(1521198725, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRoot_typeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x8d\x4f\x4b\x03\x31\x10\xc5\xef\xf9\x14\xc3\x9e\x35\x7b\xef\xcd\x83\x48\xa1\x8a\xb4\x45\x7a\x6c\x48\x87\x34\x98\x3f\x4b\x32\xd6\x94\x61\xbe\xbb\x64\xbb\xa2\xcd\x29\xcc\x7b\xef\xf7\x1b\x47\x78\xc1\x84\xc5\x10\x9e\xe0\xdb\xd3\x19\x5c\x6e\x16\x2e\xcc\xfa\x03\x4b\xf5\x39\x89\xc0\x23\x14\xbc\x00\xb3\xde\xe2\x45\x44\x4d\xc6\x7e\x1a\x87\xfd\xf0\x7e\xfb\xbe\x99\x88\x22\x4a\xf9\x38\xe5\x42\x30\x60\xb2\xf9\xe4\x93\x1b\x5b\x0c\x83\x62\x2e\x26\x39\x04\xbd\x9e\xe3\x2a\xa2\x00\x00\x96\x32\xb3\x7e\x0a\xde\x54\x11\x18\xfe\x88\x22\x7d\x87\xe9\xd4\xb1\xe3\x08\xdb\x9c\xe9\x39\x60\xc4\x44\x8a\xae\xd3\x2c\xbf\x59\xa1\x52\xf9\xb2\x04\x3c\x43\x99\xf5\xfe\x3a\xe1\xa2\x38\xbc\x6e\x7a\x09\x5a\x0c\x73\x1b\x8e\x2d\x86\x55\xd7\xec\x4d\x71\x48\xfd\x56\x27\x63\x3b\x86\x59\x2f\x75\x91\xe1\x38\xcf\x77\xf6\x8c\xd1\x6c\xb2\x35\xe4\x73\xea\x22\x9f\xdc\xc2\x68\xd5\xaf\xea\x5d\xfe\x60\x88\xca\xb2\x3c\xec\xd6\xf0\xef\xdd\x2f\x63\x48\x75\xd5\xaa\xff\x1d\x88\xfa\x09\x00\x00\xff\xff\xeb\x68\x14\x73\x86\x01\x00\x00")

func templatesRoot_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesRoot_typeTmpl,
		"templates/root_type.tmpl",
	)
}

func templatesRoot_typeTmpl() (*asset, error) {
	bytes, err := templatesRoot_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/root_type.tmpl", size: 390, mode: os.FileMode(436), modTime: time.Unix(1521197199, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSimple_typeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8d\x31\x4f\xc3\x30\x14\x84\xe7\xbe\x5f\x71\xea\xd4\x20\x91\xec\x48\x0c\x4c\x88\xa5\x42\x80\xd8\xad\xf4\x08\x16\xb1\x63\x39\x8e\x4b\x65\xbd\xff\x8e\x9c\x88\x76\x3b\x9f\xbf\xef\x5e\xd7\xe1\x99\x9e\xd1\x24\x9e\x70\xb6\xe9\x1b\xc3\xf4\xdb\x23\x97\xd2\x7e\x32\xce\x76\xf2\xaa\xb8\x47\x64\x46\x29\xed\x1b\xb3\xaa\x04\xd3\xff\x98\x81\xb5\x78\xdd\xe2\xd1\x38\xaa\x8a\x94\x12\x8d\x1f\x88\xf6\xc5\x85\x29\xa6\x59\x55\x00\xc0\xae\xaf\xca\x3f\x8d\xd6\xcc\xaa\xd8\xdf\x5c\xd5\xbd\x94\x42\x7f\xaa\x03\x5d\x87\x77\xeb\xc2\xc8\x8f\x4b\xa0\xa4\x4b\x58\xaf\x6c\xf3\x35\xd5\xba\x72\x5f\x8b\xef\x71\xe4\xf9\xfa\x79\xc8\x66\x5c\x88\xbb\x2b\xd3\xac\xf9\xdf\x94\x9d\x23\x1e\x1e\x71\xb8\x95\xcd\xa6\x34\xb2\x8b\x4c\x4b\xf4\x70\x14\x95\xbf\x00\x00\x00\xff\xff\xc7\xbb\x88\x31\x10\x01\x00\x00")

func templatesSimple_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSimple_typeTmpl,
		"templates/simple_type.tmpl",
	)
}

func templatesSimple_typeTmpl() (*asset, error) {
	bytes, err := templatesSimple_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/simple_type.tmpl", size: 272, mode: os.FileMode(436), modTime: time.Unix(1521200301, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesUnion_typeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8b\xc1\xca\x82\x40\x14\x85\xf7\xf7\x29\xce\x52\x7f\xf8\x9d\xc7\x68\x27\x11\xd5\x7e\x98\x4e\x26\xd1\x55\xc6\x51\x93\xe1\xbe\x7b\x98\x60\xbb\xc3\xf9\xbe\xcf\x39\x1c\xa8\x8c\x3e\xf1\x86\xb9\x4d\x0f\x34\xdd\x3b\x60\xca\xb9\xba\x32\x0e\x6d\xa7\x66\xf8\x47\xe4\x84\x9c\xab\x13\x27\x33\xe9\x7d\x78\xfa\x86\xeb\x71\xdc\x66\xed\x5f\x34\x13\x71\x0e\x17\x6d\x3b\x3d\x2f\x3d\x25\x2d\xfd\xd7\xd9\x20\x86\x14\xc7\x90\x90\x05\xc0\x7a\xaf\x8e\x99\x98\xc8\x7d\xd4\x80\x9a\xf3\xee\x16\x25\xfe\x7e\xe1\x56\x44\xa6\x31\x2a\x94\x73\xb1\xa3\x52\xec\x13\x00\x00\xff\xff\x31\x39\x5b\x7b\xc0\x00\x00\x00")

func templatesUnion_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesUnion_typeTmpl,
		"templates/union_type.tmpl",
	)
}

func templatesUnion_typeTmpl() (*asset, error) {
	bytes, err := templatesUnion_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/union_type.tmpl", size: 192, mode: os.FileMode(436), modTime: time.Unix(1521198302, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/abstract.tmpl": templatesAbstractTmpl,
	"templates/any.tmpl": templatesAnyTmpl,
	"templates/attribute.tmpl": templatesAttributeTmpl,
	"templates/attribute_group.tmpl": templatesAttribute_groupTmpl,
	"templates/base_type.tmpl": templatesBase_typeTmpl,
	"templates/complex_element.tmpl": templatesComplex_elementTmpl,
	"templates/complex_type.tmpl": templatesComplex_typeTmpl,
	"templates/enumeration.tmpl": templatesEnumerationTmpl,
	"templates/list_type.tmpl": templatesList_typeTmpl,
	"templates/root_type.tmpl": templatesRoot_typeTmpl,
	"templates/simple_type.tmpl": templatesSimple_typeTmpl,
	"templates/union_type.tmpl": templatesUnion_typeTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"abstract.tmpl": &bintree{templatesAbstractTmpl, map[string]*bintree{}},
		"any.tmpl": &bintree{templatesAnyTmpl, map[string]*bintree{}},
		"attribute.tmpl": &bintree{templatesAttributeTmpl, map[string]*bintree{}},
		"attribute_group.tmpl": &bintree{templatesAttribute_groupTmpl, map[string]*bintree{}},
		"base_type.tmpl": &bintree{templatesBase_typeTmpl, map[string]*bintree{}},
		"complex_element.tmpl": &bintree{templatesComplex_elementTmpl, map[string]*bintree{}},
		"complex_type.tmpl": &bintree{templatesComplex_typeTmpl, map[string]*bintree{}},
		"enumeration.tmpl": &bintree{templatesEnumerationTmpl, map[string]*bintree{}},
		"list_type.tmpl": &bintree{templatesList_typeTmpl, map[string]*bintree{}},
		"root_type.tmpl": &bintree{templatesRoot_typeTmpl, map[string]*bintree{}},
		"simple_type.tmpl": &bintree{templatesSimple_typeTmpl, map[string]*bintree{}},
		"union_type.tmpl": &bintree{templatesUnion_typeTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

