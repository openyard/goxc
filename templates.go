// Code generated by go-bindata.
// sources:
// templates/abstract.tmpl
// templates/any.tmpl
// templates/attribute.tmpl
// templates/attribute_group.tmpl
// templates/base_type.tmpl
// templates/complex_element.tmpl
// templates/complex_type.tmpl
// templates/enumeration.tmpl
// templates/list_type.tmpl
// templates/root_type.tmpl
// templates/simple_type.tmpl
// templates/union_type.tmpl
// DO NOT EDIT!

package goxc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesAbstractTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x24\x8a\x41\x0a\xc2\x40\x0c\x45\xf7\x39\xc5\xbf\x80\x9d\x33\xb8\x72\x27\x22\xe2\x3e\x8e\xa1\x16\xb1\x1d\x32\x71\xb4\x84\xdc\x5d\xec\xec\x1e\xef\xbd\x94\x70\x90\x59\x94\x4d\xee\xf8\x4c\xf6\xc0\xb8\x7c\x33\x9a\xfb\x70\x15\xad\xd3\x32\x47\x60\x07\x95\x06\xf7\xe1\x2c\x2d\x82\x0a\xe7\x27\x8f\xf2\x17\xa7\x8e\x47\x7e\x49\x04\x51\x4a\xd8\xdf\xaa\x29\x67\xbb\xac\x45\xc8\xd6\xb2\x6d\xbd\xa3\x9a\xbe\xb3\xc1\x83\x7e\x01\x00\x00\xff\xff\x79\x35\x37\xc6\x77\x00\x00\x00")

func templatesAbstractTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAbstractTmpl,
		"templates/abstract.tmpl",
	)
}

func templatesAbstractTmpl() (*asset, error) {
	bytes, err := templatesAbstractTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/abstract.tmpl", size: 119, mode: os.FileMode(436), modTime: time.Unix(1521194688, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesAnyTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x24\x8c\x31\x4b\x04\x31\x10\x85\xfb\xf9\x15\x8f\xad\xcf\x4d\x6f\x27\x16\x36\x2a\x22\x22\x96\xb7\xec\x0d\x6b\x30\x33\x09\xb9\x71\x4d\x08\xf9\xef\x92\xbd\xee\x7b\x1f\x8f\xcf\x39\x3c\xb1\x72\x5e\x8c\x2f\xf8\xf3\xf6\x8d\x2d\x96\x15\x7b\x6b\xf3\x27\xe7\xab\x8f\xda\x3b\xee\x90\x79\x47\x6b\xf3\x3b\xef\xbd\x53\x5a\xd6\x9f\x65\xe3\x21\xde\x6e\xf8\xba\x08\xf7\x4e\xe4\x25\xc5\x6c\x98\x58\xd7\x78\xf1\xba\xb9\x22\x61\x22\x72\x0e\x0f\x5a\xf1\x51\x13\x93\xd5\xc4\xc7\xba\x5a\xfe\x5d\x0d\x8d\x00\xe0\xeb\xe5\x79\x34\x50\x24\xcc\x03\x0e\xf9\x18\xd5\x58\x6d\x3c\xbd\x6e\x00\xce\x45\xc2\xfd\x74\xf2\xaa\x9c\x8b\x84\x53\x14\x6f\x2c\xc9\xea\x74\xa6\x4e\xff\x01\x00\x00\xff\xff\xbb\xff\xfa\x1f\xcb\x00\x00\x00")

func templatesAnyTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAnyTmpl,
		"templates/any.tmpl",
	)
}

func templatesAnyTmpl() (*asset, error) {
	bytes, err := templatesAnyTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/any.tmpl", size: 203, mode: os.FileMode(436), modTime: time.Unix(1521190512, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesAttributeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8d\xbb\x4e\xc3\x50\x10\x44\x6b\xf6\x2b\x46\x2e\x11\xd8\x3d\x5d\x2a\x44\x83\x10\x42\xa9\x73\x71\x56\xe6\x0a\xbf\xb4\x77\x6d\x12\xad\xe6\xdf\x91\x93\x48\xe9\xf6\x71\xe6\x4c\xd3\xe0\x55\x47\xb5\xe4\x7a\xc4\x5f\xf6\x1f\x74\xd3\xa9\xc5\x1a\x51\xef\xd5\x4a\x9e\x46\x12\xcf\x30\x5d\x11\x51\x7f\xea\x4a\xca\x9c\xda\xdf\xd4\xe9\x76\xf8\xb8\x8e\xef\x69\x50\x52\x22\x2c\x8d\x9d\xa2\x7e\x1b\xe6\xc9\xbc\x90\x02\x00\xf9\xb2\x6d\xf8\xae\xcf\xa9\x90\xa8\xee\x51\xb2\x92\x08\x1d\x8f\xa4\x34\x0d\x76\xee\x96\xbf\x17\x57\xf1\xf3\x7c\xa9\xf8\x3a\xcf\x37\x3f\x8a\xdb\xd2\x3a\x42\x1e\xf6\xa9\x5f\x14\x8f\xb7\x37\x89\xc3\x69\xe8\x5f\x36\xed\x15\x7d\x4a\xee\x56\x1d\x84\xf2\x1f\x00\x00\xff\xff\x14\x2d\x66\x29\xe1\x00\x00\x00")

func templatesAttributeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAttributeTmpl,
		"templates/attribute.tmpl",
	)
}

func templatesAttributeTmpl() (*asset, error) {
	bytes, err := templatesAttributeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/attribute.tmpl", size: 225, mode: os.FileMode(436), modTime: time.Unix(1521194698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesAttribute_groupTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8e\x31\x4f\xc3\x30\x10\x85\x77\xff\x8a\xa7\x8c\x88\x3a\x3b\x5b\x07\x54\xb1\x00\x42\x88\xb9\xa6\x3d\x05\x8b\x3a\xb1\xec\x4b\x68\x74\x7a\xff\x1d\xb5\x8d\xd2\xed\xde\xe9\xde\x7d\x5f\xdb\x62\x27\xbd\x94\xa0\x72\xc4\x5f\xd4\x1f\x74\xc3\xf9\x80\xc9\xcc\x7f\x49\xa9\x71\xe8\x49\x6c\x50\x64\x82\x99\xff\x90\x89\x74\x39\x1c\x7e\x43\x27\x97\xc5\xfb\x6d\x7c\x0d\x49\x48\xe7\xcc\x4a\xe8\x3b\x81\x7f\x49\x79\x28\x5a\xb1\x21\x1d\x00\xc4\x6b\xbe\x34\xb6\xa7\x18\x2a\x89\xe6\xde\x26\x1b\x67\x26\xfd\x91\x74\x6d\x8b\xad\x6a\x89\xdf\xa3\xca\xae\x0c\x63\x76\x3a\xe7\x2b\xea\xc6\x40\xd5\x32\x1e\x14\x76\x67\xad\xf7\x75\x81\x99\xf9\xcf\x39\x2f\x52\x78\x58\x22\x89\xfd\x39\x9d\x9e\x9a\xf5\xd7\x63\x50\x2d\x66\xfe\x2d\x45\x7d\x4e\x59\x67\xb2\xd9\xaf\x26\x74\xff\x01\x00\x00\xff\xff\x65\x81\xd7\x8d\x1c\x01\x00\x00")

func templatesAttribute_groupTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAttribute_groupTmpl,
		"templates/attribute_group.tmpl",
	)
}

func templatesAttribute_groupTmpl() (*asset, error) {
	bytes, err := templatesAttribute_groupTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/attribute_group.tmpl", size: 284, mode: os.FileMode(436), modTime: time.Unix(1521194707, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesBase_typeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8d\x31\x8a\xc3\x30\x10\x45\x7b\x9d\xe2\xe3\x7e\xad\x33\xec\x36\xcb\x36\x4b\x08\x21\xfd\x60\x0f\x8e\x48\x2c\x0b\x49\x38\x31\xc3\xbf\x7b\x90\x5d\xa4\x7b\xf3\x98\x79\xe3\x3d\x7e\x35\x6a\x96\xaa\x23\x9e\xa1\xde\x30\x2d\xaf\x01\xab\x59\x7f\xd5\x5c\xc2\x12\x49\x7c\x21\xeb\x0a\xb3\xfe\xac\x2b\xe9\x92\x0c\x77\x99\xb4\x89\xd3\x81\xff\x32\x2b\xe9\x9c\x59\x96\x38\x29\xfa\xbf\x39\x2d\xb9\x16\xd2\x01\x40\xd8\xa7\xb6\xff\xfd\x08\x52\x48\x74\x9f\x5b\xb2\x73\x66\x1a\xc7\x16\xf0\x1e\x3f\x52\xf4\xb2\x25\x75\x75\x4b\xfb\x8f\x23\xde\xa8\x69\xd2\xbd\x03\x00\x00\xff\xff\xad\x4b\x2f\x37\xb4\x00\x00\x00")

func templatesBase_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesBase_typeTmpl,
		"templates/base_type.tmpl",
	)
}

func templatesBase_typeTmpl() (*asset, error) {
	bytes, err := templatesBase_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/base_type.tmpl", size: 180, mode: os.FileMode(436), modTime: time.Unix(1521190541, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesComplex_elementTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\xb1\x6e\xf3\x30\x0c\x84\x77\x3d\x05\xe1\xf1\x47\x22\xef\xff\x96\x16\x41\xd0\xa5\x2d\x82\x22\x73\x58\x9b\x4d\x84\x5a\xb2\x20\xd1\xa9\x0d\x82\xef\x5e\x58\x0e\xdc\xa1\xdd\x44\x9d\xee\xbe\x13\xeb\x1a\x0e\x14\x28\x21\x53\x0b\x5f\x8e\xaf\x70\xe9\xc7\x06\x6e\x22\xf6\x44\x29\xbb\x3e\xa8\xc2\x16\x12\xdd\x40\xc4\x1e\xe9\xa6\x6a\x22\x36\x9f\x78\xa1\xf9\xe2\x75\x39\x3e\xa3\x27\x55\x63\x44\x12\x86\x0b\x81\x7d\xf2\xb1\x4f\x9c\x61\xab\x6a\x00\x00\x5c\x99\x67\xc7\xae\x73\x98\x55\xa1\xfa\x71\xab\x56\x46\x84\x42\xab\x6a\xea\x1a\x1e\x7b\x1f\x3b\x1a\xf7\x1d\x79\x0a\x6c\x78\x8a\x05\xb5\x30\x20\x73\x1a\x1a\x06\x29\xb1\x27\xec\x06\x82\x7f\x22\xf6\x01\xf3\xac\x9e\x47\xdf\xfd\xaf\x36\xcd\x15\x53\x8b\x8c\xd5\xb9\x3c\x5b\x6b\xed\x98\x93\x7b\x1f\x98\xf2\xbd\xd7\xa2\x6e\xc1\xbe\x4d\xf1\xfe\x8b\x12\x37\x8f\x6b\xdc\x0a\xdf\x20\x73\x12\xb1\x2f\xde\xf1\xde\x47\x9e\x54\x57\xc2\x52\xff\x6f\xda\x21\xf5\x43\xfc\x85\x3c\xd2\xc7\xea\xa0\xd0\x96\x5d\xa9\xf9\x0e\x00\x00\xff\xff\x3a\xcd\x5c\x4c\x91\x01\x00\x00")

func templatesComplex_elementTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesComplex_elementTmpl,
		"templates/complex_element.tmpl",
	)
}

func templatesComplex_elementTmpl() (*asset, error) {
	bytes, err := templatesComplex_elementTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/complex_element.tmpl", size: 401, mode: os.FileMode(436), modTime: time.Unix(1521194715, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesComplex_typeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x93\x41\x8b\xdb\x30\x10\x85\xef\xfa\x15\x43\x4e\x49\xd8\x38\x87\xde\x0a\x3d\xa4\x65\x59\x7a\xd9\x2e\x69\xe9\xa5\x14\x56\xb5\x27\xa9\xa9\x25\x0b\x79\x6c\xc7\x88\xf9\xef\xc5\xb2\xac\xc6\xbb\xce\x2e\x81\xee\x2d\xce\x68\xde\xf7\xf4\xfc\xbc\xdd\xc2\x1d\x6a\xb4\x92\x30\x83\x36\xa7\xdf\x70\x2c\x4f\x29\x34\xce\x25\xdf\xd1\x56\x79\xa9\x99\x61\x03\x16\x1b\x70\x2e\xd9\x63\xc3\x2c\x8c\x4c\xff\xc8\x23\xf6\x7f\x3c\x0c\x3f\xef\xa5\x42\x66\x21\x9c\xb3\x52\x1f\x11\x92\xcf\xca\x94\x96\x2a\xd8\x30\x0b\x00\x80\xdc\x3f\xf7\x1b\xbb\x22\x97\x15\x33\x2c\xfe\x6d\x33\x2f\x84\x73\xa8\x33\x7f\x7c\xbb\x85\x4f\xa5\x32\x05\x9e\xbe\x75\x06\x05\x75\xc6\x93\x06\x04\x54\x64\xeb\x94\xc0\x79\x55\xe7\x92\x8f\xb2\xc2\xc0\x88\xf0\x1d\x91\xcd\x7f\xd5\x84\x55\x98\x0c\xd3\x0d\x24\xbd\x62\x10\x5a\x3b\xe7\x1f\x99\xe1\xf1\xa4\x8a\xf7\x8b\xc8\xb8\x91\x44\xd6\xb9\xe4\x8b\xca\xe9\x56\x19\xea\x98\x17\x8f\x81\x30\x9a\x9c\xf0\x6e\x0b\x54\xa8\xe9\x25\x5a\x7f\x71\x6b\x65\xc7\xbc\x8e\xa6\xa7\xdc\xca\xc8\x14\x99\xa3\x8b\x6b\x0c\xec\xf1\xf0\xda\x55\xff\x37\x32\x66\x7c\x67\xcb\xda\x3c\xa3\xef\xf1\x10\x37\xe6\xf7\x75\x77\xb6\xb3\xd3\x1d\xfc\xf8\xb9\x6e\xdf\xa5\xfd\xe0\xc9\x9e\xef\x55\x7e\x80\xf1\x5d\x1f\x6a\x9d\xc2\x3d\xb6\xd1\xf7\x72\x75\x7e\xc5\xa1\x1a\x16\xa9\xb6\x1a\x34\xb6\xcb\x38\x5a\x09\xee\x7b\x56\xbc\xa8\x32\xbe\xb0\x19\x95\x61\x14\x54\x74\x36\x29\xfc\xa4\x73\x5e\x7b\xa9\xd0\x0b\x3e\x48\x8b\x9a\x98\x57\xf0\x15\x29\x94\x2e\x10\x1b\x59\xd4\x78\xd6\xc4\x55\xc0\x2a\x4c\x26\x07\xe1\x03\xf8\xa3\x23\xd9\xc7\x22\xe6\xfa\x37\x04\x15\xaa\x76\xc9\xc7\x2e\xcb\x2e\xf9\x08\x41\x5d\xf6\x21\x8d\x41\x9d\x2d\x9f\x4e\x6e\x06\x83\xcf\x13\xbe\x2a\x85\x57\xe9\x93\x14\x78\x3e\x8d\xf0\x31\xbc\x35\xbd\xa7\xfe\x0d\x00\x00\xff\xff\x6b\xa4\x29\xe4\x3d\x05\x00\x00")

func templatesComplex_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesComplex_typeTmpl,
		"templates/complex_type.tmpl",
	)
}

func templatesComplex_typeTmpl() (*asset, error) {
	bytes, err := templatesComplex_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/complex_type.tmpl", size: 1341, mode: os.FileMode(436), modTime: time.Unix(1521194719, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesEnumerationTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8e\xc1\x4a\x04\x31\x10\x44\xef\xf9\x8a\x62\x4f\x7a\x98\xec\x17\x78\x50\x10\xf1\x22\x22\xb2\x57\x09\xb3\xcd\x18\xdc\xe9\x0c\x49\x76\x74\x69\xea\xdf\x25\xbb\x03\xb9\x15\x4d\xd7\xab\xb7\xdf\xe3\x45\x54\x72\xa8\x72\xc4\x6f\xac\xdf\x98\xd2\xdf\x88\xd5\xcc\x1f\x24\x97\x98\x94\xc4\x80\x2c\x2b\xcc\xfc\x87\xac\xa4\x5b\xc2\xf8\x13\x26\x69\x87\xf7\x5b\x7c\x0b\xb3\x90\xce\x2c\x07\x9d\x04\xfe\x75\x5e\x52\xae\x85\x74\xf1\x9a\xda\xeb\xe3\x29\x86\x42\x62\xd7\x6b\xe4\xce\x99\x89\x1e\x49\x57\x2f\xcb\x46\xcc\xa2\x95\x34\xf3\x37\x6a\x3b\x3e\x85\xd2\xf8\x6e\x4c\x5a\x2a\xee\xfa\xd0\xb3\x9e\xe7\x26\x1f\x93\xb6\x35\x00\x30\x1b\xb0\x55\xbf\xcc\xfc\xe7\x65\x91\x0e\xda\xd2\xc3\xd5\xe2\x10\x4e\xe7\xee\x80\x81\x74\xf7\xff\x01\x00\x00\xff\xff\x56\x20\x91\x02\x10\x01\x00\x00")

func templatesEnumerationTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEnumerationTmpl,
		"templates/enumeration.tmpl",
	)
}

func templatesEnumerationTmpl() (*asset, error) {
	bytes, err := templatesEnumerationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/enumeration.tmpl", size: 272, mode: os.FileMode(436), modTime: time.Unix(1521194725, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesList_typeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8d\xc1\x4a\xc4\x40\x10\x44\xef\xf3\x15\x45\x8e\xa2\xc9\xdd\x9b\x27\x11\x44\x44\x64\x2f\x22\x6c\x93\x34\xd9\xc1\x64\x32\xcc\xf4\xc6\x5d\x9a\xfa\x77\x49\xf6\xe0\xad\xbb\x78\xf5\xaa\xeb\xf0\xac\x49\x8b\x98\x0e\xf8\x8d\x76\xc2\xb8\x5c\x7a\xac\xee\xed\x41\x4b\x8d\x4b\x22\xf1\x80\xa2\x2b\xdc\xdb\x0f\x5d\xc9\x90\xa5\xff\x91\x51\xb7\xe0\xfd\x76\xbe\xc9\xac\x64\x70\x2f\x92\x46\x45\xfb\x32\xe7\xa5\x58\x25\x03\x00\xc4\xfd\xdb\xf0\xa7\x29\x4a\x25\xd1\xfc\x57\xc9\x26\xb8\x6b\x1a\xc8\xd0\x75\x78\x8d\xd5\x3e\xaf\x59\x83\x5d\xf3\xbe\x70\x53\xa3\x5a\x39\xf7\x06\xdf\x85\x07\x99\xce\x8a\xaf\xef\x3b\xf7\x76\x83\x49\x1c\x2f\xf3\xf4\xd8\xdc\xf7\x27\x29\x83\x98\x34\xc7\xc0\xbf\x00\x00\x00\xff\xff\x8f\x18\xd3\xce\xdb\x00\x00\x00")

func templatesList_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesList_typeTmpl,
		"templates/list_type.tmpl",
	)
}

func templatesList_typeTmpl() (*asset, error) {
	bytes, err := templatesList_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/list_type.tmpl", size: 219, mode: os.FileMode(436), modTime: time.Unix(1521194729, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRoot_typeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x8d\x4f\x4b\x03\x31\x10\xc5\xef\xf9\x14\xc3\x9e\x35\x7b\xef\xcd\x83\x48\xa1\x8a\xb4\x45\x7a\x6c\x48\x87\x34\x98\x3f\x4b\x32\xd6\x94\x61\xbe\xbb\x64\xbb\xa2\xcd\x29\xcc\x7b\xef\xf7\x1b\x47\x78\xc1\x84\xc5\x10\x9e\xe0\xdb\xd3\x19\x5c\x6e\x16\x2e\xcc\xfa\x03\x4b\xf5\x39\x89\xc0\x23\x14\xbc\x00\xb3\xde\xe2\x45\x44\x4d\xc6\x7e\x1a\x87\xfd\xf0\x7e\xfb\xbe\x99\x88\x22\x4a\xf9\x38\xe5\x42\x30\x60\xb2\xf9\xe4\x93\x1b\x5b\x0c\x83\x62\x2e\x26\x39\x04\xbd\x9e\xe3\x2a\xa2\x00\x00\x96\x32\xb3\x7e\x0a\xde\x54\x11\x18\xfe\x88\x22\x7d\x87\xe9\xd4\xb1\xe3\x08\xdb\x9c\xe9\x39\x60\xc4\x44\x8a\xae\xd3\x2c\xbf\x59\xa1\x52\xf9\xb2\x04\x3c\x43\x99\xf5\xfe\x3a\xe1\xa2\x38\xbc\x6e\x7a\x09\x5a\x0c\x73\x1b\x8e\x2d\x86\x55\xd7\xec\x4d\x71\x48\xfd\x56\x27\x63\x3b\x86\x59\x2f\x75\x91\xe1\x38\xcf\x77\xf6\x8c\xd1\x6c\xb2\x35\xe4\x73\xea\x22\x9f\xdc\xc2\x68\xd5\xaf\xea\x5d\xfe\x60\x88\xca\xb2\x3c\xec\xd6\xf0\xef\xdd\x2f\x63\x48\x75\xd5\xaa\xff\x1d\x88\xfa\x09\x00\x00\xff\xff\xeb\x68\x14\x73\x86\x01\x00\x00")

func templatesRoot_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesRoot_typeTmpl,
		"templates/root_type.tmpl",
	)
}

func templatesRoot_typeTmpl() (*asset, error) {
	bytes, err := templatesRoot_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/root_type.tmpl", size: 390, mode: os.FileMode(436), modTime: time.Unix(1521194735, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSimple_typeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8d\xb1\xaa\xc3\x30\x0c\x45\x77\x7d\xc5\x25\xfb\x8b\xbf\xe1\x4d\x8f\xb7\x94\xd2\x96\xee\x26\x11\xa9\x69\xe2\x18\xc7\xa4\x0d\xe2\xfe\x7b\x71\x32\x74\x3b\x3a\x48\x47\xce\xe1\x4f\xa3\x66\x5f\xb4\xc7\x2b\x94\x07\x86\xf9\xdd\x61\x35\x6b\xef\x9a\x97\x30\x47\x12\x3f\xc8\xba\xc2\xac\xbd\xe8\x4a\x4a\xf2\xdd\xd3\x0f\x5a\xc5\xf9\xc0\x93\x9f\x94\x14\x31\xcb\x3e\x0e\x8a\xf6\x7f\x4a\x73\x2e\x0b\x29\x00\x10\xf6\xa9\xee\xff\x8e\xc1\x2f\x24\x9a\xef\x2d\xd9\x88\x99\xc6\xbe\x06\x9c\xc3\x35\x4c\x69\xd4\xdb\x96\x54\xca\x96\xf6\x2f\x47\xbe\x52\xd5\xa4\x7c\x02\x00\x00\xff\xff\x40\x14\x79\x43\xb6\x00\x00\x00")

func templatesSimple_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSimple_typeTmpl,
		"templates/simple_type.tmpl",
	)
}

func templatesSimple_typeTmpl() (*asset, error) {
	bytes, err := templatesSimple_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/simple_type.tmpl", size: 182, mode: os.FileMode(436), modTime: time.Unix(1521194680, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesUnion_typeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x24\xca\x41\x0a\xc2\x30\x14\x84\xe1\xfd\x3b\xc5\x5c\xc0\xe6\x18\xee\x44\x44\xdd\x87\xf8\xa8\x41\x4c\x42\x1a\xa3\xe5\x31\x77\x97\xb4\xbb\xe1\x9f\xcf\x39\x1c\x35\x69\xf5\x4d\x1f\xf8\xc6\xf6\xc4\x9c\x7f\x01\xdd\x6c\xba\x6b\x5d\x62\x4e\x24\x0e\xa8\xda\x61\x36\x5d\xb4\x93\x52\x7c\x78\xf9\x59\x47\x38\xef\xf3\xe4\xdf\x4a\x8a\x38\x87\x5b\x8a\x39\x5d\xd7\xa2\xd2\xd6\xb2\x99\xfd\xc4\xd2\xea\x27\x34\x98\x00\x18\x79\x18\x52\x28\xff\x00\x00\x00\xff\xff\xb5\xea\x67\x4c\x83\x00\x00\x00")

func templatesUnion_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesUnion_typeTmpl,
		"templates/union_type.tmpl",
	)
}

func templatesUnion_typeTmpl() (*asset, error) {
	bytes, err := templatesUnion_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/union_type.tmpl", size: 131, mode: os.FileMode(436), modTime: time.Unix(1521194742, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/abstract.tmpl": templatesAbstractTmpl,
	"templates/any.tmpl": templatesAnyTmpl,
	"templates/attribute.tmpl": templatesAttributeTmpl,
	"templates/attribute_group.tmpl": templatesAttribute_groupTmpl,
	"templates/base_type.tmpl": templatesBase_typeTmpl,
	"templates/complex_element.tmpl": templatesComplex_elementTmpl,
	"templates/complex_type.tmpl": templatesComplex_typeTmpl,
	"templates/enumeration.tmpl": templatesEnumerationTmpl,
	"templates/list_type.tmpl": templatesList_typeTmpl,
	"templates/root_type.tmpl": templatesRoot_typeTmpl,
	"templates/simple_type.tmpl": templatesSimple_typeTmpl,
	"templates/union_type.tmpl": templatesUnion_typeTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"abstract.tmpl": &bintree{templatesAbstractTmpl, map[string]*bintree{}},
		"any.tmpl": &bintree{templatesAnyTmpl, map[string]*bintree{}},
		"attribute.tmpl": &bintree{templatesAttributeTmpl, map[string]*bintree{}},
		"attribute_group.tmpl": &bintree{templatesAttribute_groupTmpl, map[string]*bintree{}},
		"base_type.tmpl": &bintree{templatesBase_typeTmpl, map[string]*bintree{}},
		"complex_element.tmpl": &bintree{templatesComplex_elementTmpl, map[string]*bintree{}},
		"complex_type.tmpl": &bintree{templatesComplex_typeTmpl, map[string]*bintree{}},
		"enumeration.tmpl": &bintree{templatesEnumerationTmpl, map[string]*bintree{}},
		"list_type.tmpl": &bintree{templatesList_typeTmpl, map[string]*bintree{}},
		"root_type.tmpl": &bintree{templatesRoot_typeTmpl, map[string]*bintree{}},
		"simple_type.tmpl": &bintree{templatesSimple_typeTmpl, map[string]*bintree{}},
		"union_type.tmpl": &bintree{templatesUnion_typeTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

