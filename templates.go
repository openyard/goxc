// Code generated by go-bindata.
// sources:
// templates/abstract.tmpl
// templates/any.tmpl
// templates/attribute.tmpl
// templates/attribute_group.tmpl
// templates/base_type.tmpl
// templates/complex_element.tmpl
// templates/complex_type.tmpl
// templates/enumeration.tmpl
// templates/list_type.tmpl
// templates/root_type.tmpl
// templates/simple_type.tmpl
// templates/union_type.tmpl
// DO NOT EDIT!

package goxc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesAbstractTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x24\xca\x41\x0a\xc2\x40\x0c\x85\xe1\x7d\x4e\xf1\x2e\x60\xe7\x18\xee\x44\x5c\xb8\x8f\xe3\xa3\x16\xb1\x2d\x69\x1c\x95\x90\xbb\xcb\xd0\xcd\xe3\xf1\xf3\x95\x82\x23\x67\x9a\x3a\xef\xf8\x4c\xfe\xc0\xb8\x7c\x2b\x5a\xc4\x70\xa5\x6d\xd3\x32\x67\xe2\x00\x63\x43\xc4\x70\x61\xcb\x94\x55\xeb\x53\x47\xf6\x70\xde\xef\x49\x5f\xcc\x14\x29\x05\x7a\xdb\xdc\xb4\x3a\xfc\xb7\x52\xfa\x74\xb7\x03\x6c\x6e\xef\xea\x88\x94\x7f\x00\x00\x00\xff\xff\xdb\x19\x22\xfe\x78\x00\x00\x00")

func templatesAbstractTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAbstractTmpl,
		"templates/abstract.tmpl",
	)
}

func templatesAbstractTmpl() (*asset, error) {
	bytes, err := templatesAbstractTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/abstract.tmpl", size: 120, mode: os.FileMode(436), modTime: time.Unix(1519746805, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesAnyTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x24\x8c\x31\x4b\x04\x31\x10\x85\xfb\xf9\x15\x8f\xad\xcf\x4d\x6f\x27\x16\x36\x2a\x62\x21\x96\x17\xf6\x86\x35\x98\x99\x84\xdc\xb8\x26\x84\xfc\x77\x89\xd7\x3c\x3e\x3e\x1e\x9f\x73\x78\x62\xe5\xe2\x8d\x2f\xf8\x0d\xf6\x85\x3d\xd5\x0d\x47\xef\xeb\x07\x97\x6b\x48\x3a\x06\xee\x50\xf8\x40\xef\xeb\x3b\x1f\x63\x50\xf6\xdb\xb7\xdf\x79\x8a\xb7\x1b\xbe\x7a\xe1\x31\x88\x82\xe4\x54\x0c\x0b\xeb\x96\x2e\x41\x77\x57\x25\x2e\x44\xce\xc1\x6b\x83\xb5\xcc\x34\x07\x0f\xda\x70\xb5\xf2\xb3\x19\x3a\x01\xc0\xe7\xcb\xf3\x6c\xa0\x4a\x5c\x27\xfc\xcb\xc7\xa4\xc6\x6a\xf3\x19\x74\x07\x70\xae\x12\xef\x97\x53\x50\xe5\x52\x25\x9e\x92\x04\x63\xc9\xd6\x96\x33\x0d\xfa\x0b\x00\x00\xff\xff\x22\xa2\xf3\xc8\xcb\x00\x00\x00")

func templatesAnyTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAnyTmpl,
		"templates/any.tmpl",
	)
}

func templatesAnyTmpl() (*asset, error) {
	bytes, err := templatesAnyTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/any.tmpl", size: 203, mode: os.FileMode(436), modTime: time.Unix(1519746805, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesAttributeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8d\xbd\x4a\xc4\x50\x10\x85\x6b\xe7\x29\x0e\x29\x45\x93\xde\xce\x4a\x6c\x44\x44\xb6\xde\x31\x3b\xc4\x8b\xf9\xe3\x66\x12\x77\x19\xce\xbb\xcb\x75\x03\xdb\x0c\xf3\x73\xbe\x6f\x9a\x06\x2f\x36\x5a\x56\xb7\x13\x7e\x93\x7f\xa3\x9b\xce\x2d\xb6\x88\xfa\x60\x79\x49\xd3\x48\xe2\x11\xd9\x36\x44\xd4\x1f\xb6\x91\x32\x6b\xfb\xa3\x9d\x95\xc5\xfb\xb5\x7d\xd3\xc1\x48\x89\xc8\x3a\x76\x86\xfa\x75\x98\xa7\xec\x0b\x29\x00\x90\xfe\xa7\x12\x7f\xee\x93\x2e\x24\xaa\x1b\x4a\x56\x12\x61\xe3\x89\x94\xa6\x81\xba\xe7\xf4\xb5\xba\xc1\x2f\xb3\x49\x29\x05\xfc\xbc\xcc\xfb\x13\x2c\x9e\xd7\xd6\x11\x72\x77\xd0\x7e\x35\xdc\xef\x67\x12\xc7\xf3\xd0\x3f\x15\xf7\x35\xfa\x50\x64\xd5\x51\x28\x7f\x01\x00\x00\xff\xff\x23\xe3\x4c\xf0\xe6\x00\x00\x00")

func templatesAttributeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAttributeTmpl,
		"templates/attribute.tmpl",
	)
}

func templatesAttributeTmpl() (*asset, error) {
	bytes, err := templatesAttributeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/attribute.tmpl", size: 230, mode: os.FileMode(436), modTime: time.Unix(1521129502, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesAttribute_groupTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8e\xb1\x4e\xc3\x40\x10\x44\xfb\xfb\x8a\x91\x4b\x44\xce\x3d\x5d\x0a\x84\x68\x00\x21\x44\x9d\x23\x59\x99\x13\x39\xfb\x74\xb7\x36\xb1\x56\xf3\xef\xc8\x89\x49\xba\x9d\x95\xde\xbc\x69\x5b\x3c\x49\x2f\x25\xa8\x1c\xf0\x1b\xf5\x1b\xdd\x70\xda\x63\x32\xf3\x9f\x52\x6a\x1c\x7a\x12\x1b\x14\x99\x60\xe6\xdf\x65\x22\x5d\x0e\xfb\x9f\xd0\xc9\xf2\x78\xbb\x9c\x2f\x21\x09\xe9\x9c\x59\x09\x7d\x27\xf0\xcf\x29\x0f\x45\x2b\x36\xa4\x03\x80\x78\xce\x0b\xb1\x3d\xc6\x50\x49\x34\x37\x9a\x6c\x9c\x99\xf4\x07\xd2\xb5\x2d\x82\x6a\x89\x5f\xa3\x0a\xba\x32\x8c\xd9\xe9\x9c\xcf\xae\x8b\x04\x55\xcb\xb8\x57\xd8\x4d\xb6\xfd\x07\xea\x6a\x33\xf3\x1f\x73\x5e\x57\xe1\x6e\x8d\x24\x76\xa7\x74\x7c\x68\xae\x5d\xf7\x8b\xca\xcc\xbf\xa6\xa8\x8f\x29\xeb\x4c\x36\xbb\xeb\x14\xba\xbf\x00\x00\x00\xff\xff\x0e\xb6\x28\x4d\x1d\x01\x00\x00")

func templatesAttribute_groupTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAttribute_groupTmpl,
		"templates/attribute_group.tmpl",
	)
}

func templatesAttribute_groupTmpl() (*asset, error) {
	bytes, err := templatesAttribute_groupTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/attribute_group.tmpl", size: 285, mode: os.FileMode(436), modTime: time.Unix(1521129502, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesBase_typeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8d\xc1\x0a\xc2\x30\x0c\x86\xef\x7d\x8a\x9f\xdd\x5d\x9f\xc1\x93\x78\x11\x11\xf1\x1e\xb7\x30\x8b\xae\x2b\x6d\xa9\x8e\x90\x77\x97\xb8\x83\x97\xf0\x27\xe4\xfb\x7e\xef\x71\xe0\xc8\x99\x2a\x8f\x78\x87\xfa\xc0\xb4\x7c\x06\x34\x91\xfe\xc6\xb9\x84\x25\xaa\x62\x87\xcc\x0d\x22\xfd\x85\x9b\xaa\x4b\x34\x3c\x69\x62\x3b\x9c\xb7\x78\xa2\x99\x55\x9d\x13\xc9\x14\x27\x46\x7f\x9c\xd3\x92\x6b\x51\x75\x00\x10\x7e\x9b\xfd\xef\x5f\x81\x8a\x2a\xba\x3f\xab\xda\x39\x11\x8e\xa3\x09\xbc\xc7\x9d\x0a\xa3\xae\x89\x9d\x0d\x83\x36\xbb\xa5\xeb\x9a\xac\xe7\x1b\x00\x00\xff\xff\xc7\xaa\x66\xd8\xb5\x00\x00\x00")

func templatesBase_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesBase_typeTmpl,
		"templates/base_type.tmpl",
	)
}

func templatesBase_typeTmpl() (*asset, error) {
	bytes, err := templatesBase_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/base_type.tmpl", size: 181, mode: os.FileMode(436), modTime: time.Unix(1519746805, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesComplex_elementTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\xb1\x6e\xf3\x30\x0c\x84\x77\x3d\x05\xe1\xf1\x47\x22\xef\xff\x96\x02\x45\xd0\xa5\x2d\x82\x22\x73\x58\x9b\x4d\x84\x5a\xb2\x20\xd1\xae\x0d\x82\xef\x5e\x58\x0e\xdc\xa1\xdd\x44\x9d\xee\xbe\x13\xeb\x1a\x8e\x14\x28\x21\x53\x0b\x5f\x8e\x6f\x70\xed\xa7\x06\x46\x11\x7b\xa6\x94\x5d\x1f\x54\x61\x0f\x89\x46\x10\xb1\x27\x1a\x55\x4d\xc4\xe6\x13\xaf\xb4\x5c\xbc\xae\xc7\x67\xf4\xa4\x6a\x8c\x48\xc2\x70\x25\xb0\x4f\x3e\xf6\x89\x33\xec\x55\x0d\x00\x80\x2b\xf3\xe2\x38\x74\x0e\xb3\x2a\x54\x3f\x6e\xd5\xca\x88\x50\x68\x55\x4d\x5d\x43\xd3\xfb\xd8\xd1\x04\xd4\x91\xa7\xc0\x86\xe7\x58\x58\x2b\x04\x32\xa7\xa1\x61\x90\x92\x7b\xc6\x6e\x20\xf8\x27\x62\x1f\x30\x2f\xea\x65\xf2\xdd\xff\x6a\xd7\xdc\x30\xb5\xc8\x58\x5d\xca\xb3\xad\xd7\x81\x39\xb9\xf7\x81\x29\xdf\x8b\xad\xea\x1e\xec\xdb\x1c\xef\xdf\x28\x71\xcb\xb8\xc5\x6d\xf0\x1d\x32\x27\x11\xfb\xe2\x1d\x3f\xfa\xc8\xb3\xea\x46\x58\xfb\xff\x4d\x3b\xa6\x7e\x88\xbf\x90\x27\xfa\xd8\x1c\x14\xda\xb2\x2c\x35\xdf\x01\x00\x00\xff\xff\xfe\x47\x1a\x12\x92\x01\x00\x00")

func templatesComplex_elementTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesComplex_elementTmpl,
		"templates/complex_element.tmpl",
	)
}

func templatesComplex_elementTmpl() (*asset, error) {
	bytes, err := templatesComplex_elementTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/complex_element.tmpl", size: 402, mode: os.FileMode(436), modTime: time.Unix(1521130801, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesComplex_typeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x90\xcf\x4a\x03\x31\x10\x87\xef\x79\x8a\x61\x8f\xc5\xee\x1e\xbc\x79\xab\x50\x8a\x17\x95\x22\x5e\x44\x68\xdc\x4e\xeb\xe2\x26\x1b\x92\xe9\x9f\x30\xcc\xbb\x4b\x76\xd7\x68\x55\x14\xc1\x4b\xc8\x64\xf2\xe5\xfb\x4d\xaa\x0a\x16\x68\xd1\x6b\xc2\x35\x1c\x1a\x7a\x86\x6d\x77\xac\x61\xcf\x5c\xde\xa3\x0f\x4d\x67\x45\x60\x0a\x1e\xf7\xc0\x5c\x2e\x71\x2f\xa2\x9c\xae\x5f\xf4\x16\xd3\xc1\xed\xb0\xbd\xd6\x06\x45\x94\x62\xf6\xda\x6e\x11\xca\x2b\xe3\x3a\x4f\x01\xa6\x22\x0a\x00\xa0\xe9\xeb\x44\xcc\xda\x46\x07\x11\x28\xde\x69\x91\x42\x31\xa3\x5d\xf7\xd7\xab\x0a\xea\xce\xb8\x16\x8f\x40\xd1\xa1\x4a\x4b\x02\x07\x07\x04\xf2\xbb\x9a\x80\xfb\x67\x99\xcb\x4b\x1d\x70\x94\x64\xfb\x8c\xc8\x37\x4f\x3b\xc2\x30\x76\x86\xee\x14\xca\xbb\xe8\xc6\xb0\x30\x61\xee\x4b\x11\x58\x1d\x4d\x7b\x51\x64\xc7\x99\x26\xf2\xcc\xe5\x8d\x69\x68\x6e\x1c\x45\x91\x62\x35\x1a\xde\x52\x9e\xf8\xe6\x2d\x1a\xb4\xf4\x93\x2d\x4d\xee\xbd\x8e\x22\x93\x1c\xfa\xd4\x1b\x9c\xae\x51\x24\xa7\xf8\x4b\x80\x25\x6e\x7e\x1b\xf5\xbf\x95\xf9\x8f\x17\xbe\xdb\xb9\x2f\xf6\x25\x6e\x32\xf1\x3d\x6f\xe3\x07\x66\x66\x23\x3c\x3c\x4e\x0e\xe7\x75\x6a\x7c\xe2\x44\xbd\x06\x00\x00\xff\xff\x28\xbf\x16\xa1\xa6\x02\x00\x00")

func templatesComplex_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesComplex_typeTmpl,
		"templates/complex_type.tmpl",
	)
}

func templatesComplex_typeTmpl() (*asset, error) {
	bytes, err := templatesComplex_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/complex_type.tmpl", size: 678, mode: os.FileMode(436), modTime: time.Unix(1521129549, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesEnumerationTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8e\xc1\x4a\x04\x31\x10\x44\xef\xf9\x8a\x62\x4f\x7a\x98\xec\x17\x78\x50\x10\xf1\x22\x22\xb2\x57\x09\xb3\xcd\x18\xdc\xe9\x0c\x49\x76\x74\x69\xea\xdf\x25\xbb\x03\xb9\x15\x4d\xd7\xab\xb7\xdf\xe3\x45\x54\x72\xa8\x72\xc4\x6f\xac\xdf\x98\xd2\xdf\x88\xd5\xcc\x1f\x24\x97\x98\x94\xc4\x80\x2c\x2b\xcc\xfc\x87\xac\xa4\x5b\xc2\xf8\x13\x26\x69\x87\xf7\x5b\x7c\x0b\xb3\x90\xce\x2c\x07\x9d\x04\xfe\x75\x5e\x52\xae\x85\x74\xf1\x9a\xda\xeb\xe3\x29\x86\x42\x62\xd7\x6b\xe4\xce\x99\x89\x1e\x49\x57\x2f\xcb\x46\xcc\xa2\x95\x34\xf3\x37\x6a\x3b\x3e\x85\xd2\xf8\x6e\x4c\x5a\x2a\xee\xfa\xd0\xb3\x9e\xe7\x26\x1f\x93\xb6\x35\x00\x30\x1b\xb0\x55\xbf\xcc\xfc\xe7\x65\x91\x0e\xda\xd2\xc3\xd5\xe2\x10\x4e\xe7\xee\x80\x81\x74\xf7\xff\x01\x00\x00\xff\xff\x56\x20\x91\x02\x10\x01\x00\x00")

func templatesEnumerationTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEnumerationTmpl,
		"templates/enumeration.tmpl",
	)
}

func templatesEnumerationTmpl() (*asset, error) {
	bytes, err := templatesEnumerationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/enumeration.tmpl", size: 272, mode: os.FileMode(436), modTime: time.Unix(1519746805, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesList_typeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8c\x31\x6b\x03\x31\x0c\x85\x77\xff\x8a\xc7\x8d\xa5\x3d\xef\xdd\x3a\x95\x2e\xa5\x94\x92\xa5\x14\x22\x7c\xe2\x62\xea\xf3\x19\x5b\xb9\x26\x08\xfd\xf7\xe2\xdc\x90\x45\x48\x7a\xef\xfb\xbc\xc7\x2b\x67\xae\x24\x3c\xe1\x2f\xca\x09\xf3\x7a\x09\xd8\x54\xc7\x03\xd7\x16\xd7\x6c\x86\x27\x54\xde\xa0\x3a\x7e\xf2\x66\xe6\x0a\x85\x5f\x9a\xb9\x3f\x3e\xf6\xf5\x9d\x16\x36\x73\xaa\x95\xf2\xcc\x18\xdf\x96\xb2\x56\x69\x66\x0e\x00\xe2\xed\xea\xf5\x97\x14\xa9\x99\x61\xb8\xa3\x66\x83\x53\xe5\x3c\x99\x39\xef\x91\x62\x13\xc8\xb5\xb0\xeb\xa3\x33\xbb\x1b\x4d\xea\x39\x08\xf4\x66\x3c\x50\x3a\x33\xbe\x7f\x1e\x54\xc7\xaf\x6b\xe9\xf9\xf1\xb2\xa4\xe7\xe1\x31\x9c\xa8\x4e\x24\x34\x1c\x9d\xfd\x07\x00\x00\xff\xff\x9b\xe9\x8a\x78\xdc\x00\x00\x00")

func templatesList_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesList_typeTmpl,
		"templates/list_type.tmpl",
	)
}

func templatesList_typeTmpl() (*asset, error) {
	bytes, err := templatesList_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/list_type.tmpl", size: 220, mode: os.FileMode(436), modTime: time.Unix(1519746805, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRoot_typeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x8d\xc1\x6a\xc3\x30\x0c\x86\xef\x7e\x0a\x91\xf3\xe6\xdc\x73\xdb\x69\x14\xba\x31\xd6\x32\x7a\xac\x71\x84\x6b\x16\xdb\xc1\xd6\x32\x17\xa1\x77\x1f\x4e\x33\xb6\xfa\x60\x84\xf4\x7f\xdf\xdf\xf7\xf0\x8c\x11\xb3\x21\x1c\xe1\xdb\xd3\x05\x5c\xaa\x16\x16\x66\xfd\x81\xb9\xf8\x14\x45\xe0\x11\x32\x2e\xc0\xac\xdf\x71\x11\x51\xb3\xb1\x9f\xc6\x61\x5b\xbc\xdd\xc6\x57\x13\x50\x44\x29\x1f\xe6\x94\x09\x3a\x8c\x36\x8d\x3e\xba\xbe\x86\xa9\x53\xcc\xd9\x44\x87\xa0\x77\xeb\xb9\x88\x28\x00\x80\x2d\xcc\xac\x9f\x26\x6f\x8a\x08\x74\x7f\x46\x91\xc6\x61\x1c\x9b\xb6\xef\x21\xa7\x44\x40\xd7\x19\x55\xfb\x1a\x74\xeb\x84\x42\xf9\xcb\x12\xf0\xaa\x64\xd6\xc7\xeb\x8c\x5b\xc1\xe9\x65\xdf\x42\x50\xc3\xb4\xa6\xe1\x5c\xc3\x34\xb4\x92\xa3\xc9\x0e\xa9\xed\xca\x6c\x6c\xd3\x30\xeb\x2d\x2e\xd2\x9d\x57\xfc\x60\x2f\x18\xcc\x3e\x59\x43\x3e\xc5\x56\xe4\xa3\xdb\x1c\xb5\xf8\xa1\xdc\xdd\x1f\x0c\x51\xde\xc8\xd3\x61\x07\xff\xde\x3d\x19\xa6\x58\x86\x5a\xfc\x2f\x20\xea\x27\x00\x00\xff\xff\xba\xff\xbf\x47\x84\x01\x00\x00")

func templatesRoot_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesRoot_typeTmpl,
		"templates/root_type.tmpl",
	)
}

func templatesRoot_typeTmpl() (*asset, error) {
	bytes, err := templatesRoot_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/root_type.tmpl", size: 388, mode: os.FileMode(436), modTime: time.Unix(1521130055, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSimple_typeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8d\xc1\x0a\xc2\x30\x0c\x86\xef\x7d\x8a\x9f\xdd\x5d\x9f\xc1\x93\x78\x11\x11\xf1\x1e\xb6\x30\x8b\x5b\x57\xda\x52\x1d\x21\xef\x2e\x71\x07\x2f\xe1\x4f\xc8\xf7\xfd\xde\xe3\xc4\x91\x33\x55\x1e\xf1\x0e\xf5\x89\x69\xfd\x0c\x68\x22\xfd\x83\x73\x09\x6b\x54\xc5\x01\x99\x1b\x44\xfa\x1b\x37\x55\x97\x68\x78\xd1\xc4\x76\xb8\xee\xf1\x42\x0b\xab\x3a\x27\x92\x29\x4e\x8c\xfe\xbc\xa4\x35\xd7\xa2\xea\x00\x20\xfc\x36\xfb\x3f\xce\x81\x8a\x2a\xba\x3f\xab\xda\x39\x11\x8e\xa3\x09\xbc\x47\x09\x4b\x9a\x19\x75\x4b\xec\x6c\x18\xb6\xfb\x2d\xdd\xb7\x64\x4d\xdf\x00\x00\x00\xff\xff\xb1\x53\x25\x5d\xb7\x00\x00\x00")

func templatesSimple_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSimple_typeTmpl,
		"templates/simple_type.tmpl",
	)
}

func templatesSimple_typeTmpl() (*asset, error) {
	bytes, err := templatesSimple_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/simple_type.tmpl", size: 183, mode: os.FileMode(436), modTime: time.Unix(1519746805, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesUnion_typeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x24\x8b\x51\x0a\x02\x31\x0c\x44\xff\x73\x8a\xb9\x80\xdb\x63\xf8\x27\x22\xe2\x7f\xa9\x61\x2d\x62\x5b\xba\xd9\xea\x12\x72\x77\x09\xfd\x19\x86\x37\xf3\x42\xc0\x99\x0b\xf7\x28\xfc\xc4\x37\xcb\x0b\x6b\xfd\x25\x0c\xd5\xe5\xc1\x7d\xcb\xb5\x98\xe1\x84\xce\x03\xaa\xcb\x8d\x87\x19\xb5\x98\xde\x71\x65\x07\xd7\x59\x2f\xf1\xc3\x66\x44\x21\x60\x2f\xb9\x16\xc8\xd1\x98\x3c\xfc\x34\x57\x6c\xd2\xf7\x24\x50\x02\xe0\xf8\x7e\x34\x97\x8c\xfe\x01\x00\x00\xff\xff\x66\x1d\x36\x78\x84\x00\x00\x00")

func templatesUnion_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesUnion_typeTmpl,
		"templates/union_type.tmpl",
	)
}

func templatesUnion_typeTmpl() (*asset, error) {
	bytes, err := templatesUnion_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/union_type.tmpl", size: 132, mode: os.FileMode(436), modTime: time.Unix(1519746805, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/abstract.tmpl": templatesAbstractTmpl,
	"templates/any.tmpl": templatesAnyTmpl,
	"templates/attribute.tmpl": templatesAttributeTmpl,
	"templates/attribute_group.tmpl": templatesAttribute_groupTmpl,
	"templates/base_type.tmpl": templatesBase_typeTmpl,
	"templates/complex_element.tmpl": templatesComplex_elementTmpl,
	"templates/complex_type.tmpl": templatesComplex_typeTmpl,
	"templates/enumeration.tmpl": templatesEnumerationTmpl,
	"templates/list_type.tmpl": templatesList_typeTmpl,
	"templates/root_type.tmpl": templatesRoot_typeTmpl,
	"templates/simple_type.tmpl": templatesSimple_typeTmpl,
	"templates/union_type.tmpl": templatesUnion_typeTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"abstract.tmpl": &bintree{templatesAbstractTmpl, map[string]*bintree{}},
		"any.tmpl": &bintree{templatesAnyTmpl, map[string]*bintree{}},
		"attribute.tmpl": &bintree{templatesAttributeTmpl, map[string]*bintree{}},
		"attribute_group.tmpl": &bintree{templatesAttribute_groupTmpl, map[string]*bintree{}},
		"base_type.tmpl": &bintree{templatesBase_typeTmpl, map[string]*bintree{}},
		"complex_element.tmpl": &bintree{templatesComplex_elementTmpl, map[string]*bintree{}},
		"complex_type.tmpl": &bintree{templatesComplex_typeTmpl, map[string]*bintree{}},
		"enumeration.tmpl": &bintree{templatesEnumerationTmpl, map[string]*bintree{}},
		"list_type.tmpl": &bintree{templatesList_typeTmpl, map[string]*bintree{}},
		"root_type.tmpl": &bintree{templatesRoot_typeTmpl, map[string]*bintree{}},
		"simple_type.tmpl": &bintree{templatesSimple_typeTmpl, map[string]*bintree{}},
		"union_type.tmpl": &bintree{templatesUnion_typeTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

